numRealRootsSquareFree:=function(p)
	P<x>:=PolynomialRing(Rationals());
	SS:=[p,Derivative(p)];
	while Degree(SS[#SS]) gt 0 do
		i:=#SS;
		SS cat:=[-(SS[i-1] mod SS[i])];
	end while;
	TT:=[Reverse(Coefficients(SS[i]))[1]*x^(#SS-i) : i in [1..#SS-1]] cat [SS[#SS]];
	infBefore:=Evaluate(TT[1],1);
	minfBefore:=Evaluate(TT[1],-1);
	b1:=infBefore gt 0;
	b2:=minfBefore gt 0;
	count1:=0;
	count2:=0;
	for i in [2..#TT] do
		infAfter:=Evaluate(TT[i],1);
		minfAfter:=Evaluate(TT[i],-1);
		c1:=infAfter gt 0;
		c2:=minfAfter gt 0;
		if b1 ne c1 then
			count1+:=1;
		end if;
		if b2 ne c2 then
			count2+:=1;
		end if;
		infBefore:=infAfter;
		minfBefore:=minfAfter;
		b1:=c1;
		b2:=c2;
	end for;
	return count2-count1;
end function;

numRealRoots:=function(p)
	P<x>:=PolynomialRing(Rationals());
	pp:=P!p;
	if Degree(pp) lt 1 then
		return 0;
	end if;
	g := GCD(pp,Derivative(pp));
	if g eq 1 then
		return numRealRootsSquareFree(pp);
	end if;
	return $$(P!(pp/g)) + $$(g);
end function;

// McKee-Smyth algorithm
getCoeffs:=function(clist,dv,nn,d)
	P<x>:=PolynomialRing(Rationals());
	Q<xx,y>:=PolynomialRing(Rationals(),2);
	f:=P!Polynomial(Reverse(clist));
	f*:=x^(d-nn);
	for j in [1..d-nn-1] do
		f:=Derivative(f);
		f/:=j;
	end for;
	g:=Q!Evaluate(f,xx)+y;
	g:=P!UnivariatePolynomial(Discriminant(g,xx));
	roots:=Roots(g,RealField(1000));
	groots:=[];
	for i in [1..#roots] do
		groots cat:=[roots[i][1] : j in [1..roots[i][2]]];
	end for;
	if #groots ne Degree(g) then
		print clist;
		print dv;
		print nn;
		print "possible error";
	end if;
	// print roots;
	pos:=Floor(nn/2);
	low:=Ceiling(groots[pos]);
	high:=Floor(groots[pos+1]);
	// print low, high;
	ss:=[];
	for j in [Ceiling(low/dv)..Floor(high/dv)+1] do
		if numRealRoots(f+dv*j) eq nn+1 then
			ss cat:=[clist cat [dv*j]];
		end if;
	end for;
	return ss;
end function;

getCoeffsType2:=function(d,clist)
	P<x>:=PolynomialRing(Rationals());
	n:=#clist-1;
	coeffLists:=[[] : i in [1..d-n+1]];
	coeffLists[1]:=[clist];
	for i in [2..d-n+1] do
		nn:=#coeffLists[i-1][1]-1;
		for j in [1..#coeffLists[i-1]] do
			coeffLists[i] cat:=getCoeffs(coeffLists[i-1][j],2^(nn+1),nn,d);
		end for;
	end for;
	return coeffLists[d-n+1];
end function;

getCoeffsWeaklyType2:=function(d,clist)
	P<x>:=PolynomialRing(Rationals());
	n:=#clist-1;
	coeffLists:=[[] : i in [1..d-n+1]];
	coeffLists[1]:=[clist];
	for i in [2..d-n+1] do
		nn:=#coeffLists[i-1][1]-1;
		for j in [1..#coeffLists[i-1]] do
			coeffLists[i] cat:=getCoeffs(coeffLists[i-1][j],2^nn,nn,d);
		end for;
	end for;
	return coeffLists[d-n+1];
end function;

// input: ff and gg are real-rooted polynomials, ff is degree one more than gg
// output: True iff the roots of gg interlace with those of ff
interlace:=function(ff,gg)
	P<x>:=PolynomialRing(Rationals());
	f:=P!ff;
	g:=P!gg;
	d:=GCD(f,g); //divide by GCD so that there are no common zeros
	// print f, d;
	f:=P!(f/d);
	g:=P!(g/d);
	roots:=Roots(g,RealField(1000));
	r:=[];
	for i in [1..#roots] do
		r cat:=[roots[i][1] : j in [1..roots[i][2]]];
	end for;
	rB2S:=Reverse(r);
	for i in [1..#rB2S] do
		if i mod 2 eq 1 then
			if Evaluate(f,rB2S[i]) gt 0 then
				return false;
			end if;
		end if;
		if i mod 2 eq 0 then
			if Evaluate(f,rB2S[i]) lt 0 then
				return false;
			end if;
		end if;
	end for;
	return true;
end function;

listInterlaceReduce:=function(l,f)
	P<x>:=PolynomialRing(Rationals());
	ll:=[];
	for i in [1..#l] do
		p:=P!Polynomial(Reverse(l[i]));
		if interlace(f,p) then
			ll cat:=[l[i]];
		end if;
	end for;
	return ll;
end function;

isType2:=function(f)
	P<x>:=PolynomialRing(Integers());
	v:=Reverse(Coefficients(P!f));
	for i in [1..#v] do
		if v[i] mod 2^(i-1) ne 0 then
			return false;
		end if;
	end for;
	return true;
end function;

listPowerReduce:=function(l,f)
	P<x>:=PolynomialRing(Rationals());
	ll:=[];
	for i in [1..#l] do
		p:=P!Polynomial(Reverse(l[i]));
		pp:=(P!f)*p;
		if isType2(Evaluate(pp,x-1)) then
			ll cat:=[l[i]];
		end if;
	end for;
	return ll;
end function;

randomSeidel:=function(n)
	m:=Matrix(Integers(),n,n,[0 : i in [1..n^2]]);
	for i in [1..n] do
		for j in [i+1..n] do
			r:=Random({0,1});
			r:=1-2*r;
			m[i,j]:=r;
			m[j,i]:=r;
		end for;
	end for;
	return m;
end function;

SeidelCharPolysMod:=function(n,k)
	ll:={};
	P<x>:=PolynomialRing(Integers(2^k));
	if n mod 2 eq 1 then
		ub:=2^(Binomial(k-2,2)+1);
	else
		ub:=2^Binomial(k-2,2);
	end if;
	while #ll lt ub do
		m:=randomSeidel(n);
		Include(~ll,P!CharacteristicPolynomial(m));
	end while;
	return ll;
end function;

listPowerReduceOdd:=function(l,f,n,k)
	P<x>:=PolynomialRing(Integers(2^k));
	ll:=[];
	ssc:=SeidelCharPolysMod(n,k);
	for i in [1..#l] do
		p:=P!Polynomial(Reverse(l[i]));
		pp:=(P!f)*p;
		if pp in ssc then
			ll cat:=[l[i]];
		end if;
	end for;
	return ll;
end function;

// use precomputed char poly classes
listPowerReduceOddPreComp:=function(l,f,k,ssc)
	P<x>:=PolynomialRing(Integers(2^k));
	ll:=[];
	// ssc:=SeidelCharPolysMod(n,k);
	for i in [1..#l] do
		p:=P!Polynomial(Reverse(l[i]));
		pp:=(P!f)*p;
		if pp in ssc then
			ll cat:=[l[i]];
		end if;
	end for;
	return ll;
end function;

isAtLeastZero:=function(l)
	d:=Dimension(Parent(l));
	for i in [1..d] do
		if l[i] lt 0 then
			return false;
		end if;
	end for;
	return true;
end function;

// ssc497:=SeidelCharPolysMod(49,7);

Lemma36Polys:=function(ssc497)
	P<x>:=PolynomialRing(Rationals());
	ll2:=getCoeffsWeaklyType2(13,[1,-137,8640]);
	llshift2:=[Evaluate(P!Polynomial(Reverse(l)), x+1) : l in ll2];
	lllist2:=[Reverse(Coefficients(l)) : l in llshift2];
	return listPowerReduceOddPreComp(lllist2,(x+5)^32*(x-9)^4,7,ssc497);
end function;

all194polys:=[
    [ 1, -124, 7074, -245916, 5813775, -98729928, 1239320412, -11644935192, 81917910063, -426162537900, 1593847891746, -4058617042764, 6307592981409, -4518872583696 ],
    [ 1, -124, 7074, -245912, 5813415, -98715348, 1238970492, -11639423952, 81858388671, -425716127460, 1591552066626, -4050868632984, 6292096161849, -4504925446092 ],
    [ 1, -124, 7074, -245900, 5812335, -98671608, 1237920732, -11622890232, 81679824495, -424376896140, 1584664591266, -4027623403644, 6245605703169, -4463084033280 ],
    [ 1, -124, 7074, -245896, 5811975, -98657028, 1237570812, -11617378992, 81620303103, -423930485700, 1582368766146, -4019874993864, 6230108883609, -4449136895676 ],
    [ 1, -124, 7074, -245888, 5811255, -98627884, 1236872124, -11606392800, 81501913503, -423045013140, 1577830023810, -4004616259872, 6199727464521, -4421931368004 ],
    [ 1, -124, 7074, -245884, 5810895, -98613288, 1236521052, -11600845272, 81441738927, -422591254380, 1575481290786, -3996629764524, 6183618424929, -4407295482864 ],
    [ 1, -124, 7074, -245880, 5810503, -98596116, 1236077820, -11593374480, 81355763583, -421906758372, 1571756952258, -3983371374456, 6155724149721, -4380950889612 ],
    [ 1, -124, 7074, -245880, 5810535, -98598740, 1236173436, -11595406608, 81383523903, -422159540580, 1573291281474, -3989357525880, 6169346045433, -4394725840332 ],
    [ 1, -124, 7074, -245880, 5810535, -98598708, 1236171132, -11595334032, 81382217535, -422144843940, 1573185465666, -3988881354744, 6168121605369, -4393348345260 ],
    [ 1, -124, 7074, -245876, 5810159, -98582880, 1235778012, -11588951880, 81311428719, -421601435676, 1570334107554, -3979092211524, 6148262718081, -4375268722440 ],
    [ 1, -124, 7074, -245876, 5810159, -98582848, 1235775708, -11588879304, 81310122351, -421586739036, 1570228291746, -3978616040388, 6147038278017, -4373891227368 ],
    [ 1, -124, 7074, -245876, 5810191, -98585440, 1235869020, -11590838856, 81336576303, -421824824604, 1571656805154, -3984126020676, 6159435733665, -4386288683016 ],
    [ 1, -124, 7074, -245876, 5810223, -98588000, 1235960028, -11592725832, 81361723887, -422048213532, 1572979502754, -3989159829828, 6170608749249, -4397308643592 ],
    [ 1, -124, 7074, -245872, 5809783, -98566972, 1235379132, -11582388288, 81237373983, -421021285812, 1567218209922, -3968112640464, 6125342730633, -4353745361940 ],
    [ 1, -124, 7074, -245872, 5809815, -98569596, 1235474748, -11584420416, 81265134303, -421274068020, 1568752539138, -3974098791888, 6138964626345, -4367520312660 ],
    [ 1, -124, 7074, -245872, 5809815, -98569564, 1235472444, -11584347840, 81263827935, -421259371380, 1568646723330, -3973622620752, 6137740186281, -4366142817588 ],
    [ 1, -124, 7074, -245868, 5809423, -98552408, 1235030364, -11576913336, 81178505775, -420582223692, 1564975292706, -3960602316252, 6110458131105, -4340486971872 ],
    [ 1, -124, 7074, -245868, 5809423, -98552376, 1235028060, -11576840760, 81177199407, -420567527052, 1564869476898, -3960126145116, 6109233691041, -4339109476800 ],
    [ 1, -124, 7074, -245868, 5809455, -98555032, 1235125980, -11578945464, 81206266095, -420835005900, 1566509621922, -3966588467676, 6124080026817, -4354261922592 ],
    [ 1, -124, 7074, -245868, 5809455, -98555000, 1235123676, -11578872888, 81204959727, -420820309260, 1566403806114, -3966112296540, 6122855586753, -4352884427520 ],
    [ 1, -124, 7074, -245868, 5809455, -98554968, 1235121372, -11578800312, 81203653359, -420805612620, 1566297990306, -3965636125404, 6121631146689, -4351506932448 ],
    [ 1, -124, 7074, -245864, 5809031, -98535204, 1234584828, -11569369968, 81091224063, -419883031044, 1561145138370, -3946867755048, 6081339415833, -4312764883548 ],
    [ 1, -124, 7074, -245864, 5809063, -98537892, 1234685116, -11571551280, 81121705983, -420166839492, 1562905795842, -3953885610600, 6097648277241, -4329600934428 ],
    [ 1, -124, 7074, -245864, 5809063, -98537860, 1234682748, -11571474672, 81120290751, -420150509892, 1562785283394, -3953330077608, 6096185751609, -4327917329340 ],
    [ 1, -124, 7074, -245864, 5809063, -98537828, 1234680444, -11571402096, 81118984383, -420135813252, 1562679467586, -3952853906472, 6094961311545, -4326539834268 ],
    [ 1, -124, 7074, -245864, 5809063, -98537796, 1234678140, -11571329520, 81117678015, -420121116612, 1562573651778, -3952377735336, 6093736871481, -4325162339196 ],
    [ 1, -124, 7074, -245864, 5809095, -98540452, 1234776060, -11573434224, 81146744703, -420388595460, 1564213796802, -3958840057896, 6108583207257, -4340314784988 ],
    [ 1, -124, 7074, -245864, 5809095, -98540420, 1234773756, -11573361648, 81145438335, -420373898820, 1564107980994, -3958363886760, 6107358767193, -4338937289916 ],
    [ 1, -124, 7074, -245860, 5808655, -98519312, 1234187100, -11562842664, 81017822511, -419310229500, 1558082148642, -3936126269556, 6059031648417, -4291930270584 ],
    [ 1, -124, 7074, -245860, 5808687, -98522032, 1234289756, -11565100584, 81049719663, -419610367548, 1559963318562, -3943699658100, 6076803035457, -4310449926552 ],
    [ 1, -124, 7074, -245860, 5808687, -98522000, 1234287388, -11565023976, 81048304431, -419594037948, 1559842806114, -3943144125108, 6075340509825, -4308766321464 ],
    [ 1, -124, 7074, -245860, 5808687, -98521968, 1234285020, -11564947368, 81046889199, -419577708348, 1559722293666, -3942588592116, 6073877984193, -4307082716376 ],
    [ 1, -124, 7074, -245860, 5808687, -98521936, 1234282716, -11564874792, 81045582831, -419563011708, 1559616477858, -3942112420980, 6072653544129, -4305705221304 ],
    [ 1, -124, 7074, -245860, 5808719, -98524624, 1234382940, -11567052072, 81075955887, -419845187196, 1561362438690, -3949050914676, 6088724319969, -4322235162168 ],
    [ 1, -124, 7074, -245860, 5808719, -98524592, 1234380636, -11566979496, 81074649519, -419830490556, 1561256622882, -3948574743540, 6087499879905, -4320857667096 ],
    [ 1, -124, 7074, -245860, 5808719, -98524560, 1234378332, -11566906920, 81073343151, -419815793916, 1561150807074, -3948098572404, 6086275439841, -4319480172024 ],
    [ 1, -124, 7074, -245860, 5808735, -98525920, 1234429596, -11568031784, 81089179407, -419964152220, 1562075762274, -3951799606260, 6094900372977, -4328399877768 ],
    [ 1, -124, 7074, -245856, 5808311, -98506060, 1233886140, -11558383776, 80972834463, -418997558484, 1556606396034, -3931609021056, 6050957996745, -4285559355876 ],
    [ 1, -124, 7074, -245856, 5808311, -98506028, 1233883836, -11558311200, 80971528095, -418982861844, 1556500580226, -3931132849920, 6049733556681, -4284181860804 ],
    [ 1, -124, 7074, -245856, 5808327, -98507484, 1233942140, -11559661856, 80991501183, -419178575988, 1557772376130, -3936421120896, 6062507981145, -4297846271796 ],
    [ 1, -124, 7074, -245856, 5808327, -98507452, 1233939772, -11559585248, 80990085951, -419162246388, 1557651863682, -3935865587904, 6061045455513, -4296162666708 ],
    [ 1, -124, 7074, -245856, 5808343, -98508748, 1233986364, -11560561056, 81003207519, -419279733972, 1558352356866, -3938547514752, 6067028772585, -4302089296740 ],
    [ 1, -124, 7074, -245856, 5808343, -98508748, 1233986428, -11560565088, 81003316383, -419281366932, 1558367053506, -3938626876608, 6067266858153, -4302395406756 ],
    [ 1, -124, 7074, -245856, 5808343, -98508716, 1233984060, -11560488480, 81001901151, -419265037332, 1558246541058, -3938071343616, 6065804332521, -4300711801668 ],
    [ 1, -124, 7074, -245856, 5808343, -98508684, 1233981756, -11560415904, 81000594783, -419250340692, 1558140725250, -3937595172480, 6064579892457, -4299334306596 ],
    [ 1, -124, 7074, -245856, 5808359, -98510076, 1234035324, -11561613344, 81017737407, -419413395636, 1559171496258, -3941772377472, 6074429265657, -4309631507412 ],
    [ 1, -124, 7074, -245856, 5808375, -98511404, 1234084156, -11562657696, 81032056479, -419543946900, 1559963108610, -3944851113600, 6081398937225, -4316629522500 ],
    [ 1, -124, 7074, -245852, 5807919, -98488840, 1233439452, -11550804120, 80884899567, -418291017516, 1552723333794, -3917636374284, 6021227061441, -4257148520016 ],
    [ 1, -124, 7074, -245852, 5807935, -98490264, 1233495516, -11552086360, 80903682063, -418473823500, 1553905876770, -3922540433100, 6033060481041, -4269809570400 ],
    [ 1, -124, 7074, -245852, 5807951, -98491528, 1233539676, -11552981400, 80915272623, -418573193004, 1554469294626, -3924574867980, 6037297837281, -4273678460880 ],
    [ 1, -124, 7074, -245852, 5807951, -98491528, 1233539740, -11552985432, 80915381487, -418574825964, 1554483991266, -3924654229836, 6037535922849, -4273984570896 ],
    [ 1, -124, 7074, -245852, 5807951, -98491496, 1233537372, -11552908824, 80913966255, -418558496364, 1554363478818, -3924098696844, 6036073397217, -4272300965808 ],
    [ 1, -124, 7074, -245852, 5807951, -98491464, 1233535068, -11552836248, 80912659887, -418543799724, 1554257663010, -3923622525708, 6034848957153, -4270923470736 ],
    [ 1, -124, 7074, -245852, 5807967, -98492920, 1233593372, -11554186904, 80932632975, -418739513868, 1555529458914, -3928910796684, 6047623381617, -4284587881728 ],
    [ 1, -124, 7074, -245852, 5807967, -98492888, 1233591004, -11554110296, 80931217743, -418723184268, 1555408946466, -3928355263692, 6046160855985, -4282904276640 ],
    [ 1, -124, 7074, -245852, 5807983, -98494184, 1233637596, -11555086104, 80944339311, -418840671852, 1556109439650, -3931037190540, 6052144173057, -4288830906672 ],
    [ 1, -124, 7074, -245852, 5807999, -98495544, 1233688796, -11556206936, 80960066703, -418987397196, 1557019698210, -3934658862540, 6060531020625, -4297444502400 ],
    [ 1, -124, 7074, -245848, 5807527, -98471636, 1232993916, -11543260752, 80797617855, -417591824868, 1548893179458, -3903901813080, 5992108346169, -4229426431692 ],
    [ 1, -124, 7074, -245848, 5807559, -98474356, 1233096572, -11545518672, 80829515007, -417891962916, 1550774349378, -3911475201624, 6009879733209, -4247946087660 ],
    [ 1, -124, 7074, -245848, 5807559, -98474324, 1233094204, -11545442064, 80828099775, -417875633316, 1550653836930, -3910919668632, 6008417207577, -4246262482572 ],
    [ 1, -124, 7074, -245848, 5807559, -98474292, 1233091836, -11545365456, 80826684543, -417859303716, 1550533324482, -3910364135640, 6006954681945, -4244578877484 ],
    [ 1, -124, 7074, -245848, 5807559, -98474260, 1233089532, -11545292880, 80825378175, -417844607076, 1550427508674, -3909887964504, 6005730241881, -4243201382412 ],
    [ 1, -124, 7074, -245848, 5807591, -98477044, 1233196796, -11547695824, 80859881151, -418173982884, 1552518443970, -3918401098200, 6025905159417, -4264408004076 ],
    [ 1, -124, 7074, -245848, 5807591, -98477044, 1233196860, -11547699984, 80859996927, -418175771364, 1552535006850, -3918493057176, 6026188594617, -4264782138540 ],
    [ 1, -124, 7074, -245848, 5807591, -98477012, 1233194492, -11547623376, 80858581695, -418159441764, 1552414494402, -3917937524184, 6024726068985, -4263098533452 ],
    [ 1, -124, 7074, -245848, 5807591, -98476980, 1233192060, -11547542736, 80857057599, -418141479204, 1552279285314, -3917302629336, 6023025457785, -4261108818348 ],
    [ 1, -124, 7074, -245848, 5807591, -98476980, 1233192124, -11547546768, 80857166463, -418143112164, 1552293981954, -3917381991192, 6023263543353, -4261414928364 ],
    [ 1, -124, 7074, -245848, 5807591, -98476948, 1233189756, -11547470160, 80855751231, -418126782564, 1552173469506, -3916826458200, 6021801017721, -4259731323276 ],
    [ 1, -124, 7074, -245848, 5807607, -98478340, 1233243388, -11548671632, 80873002719, -418291470468, 1553218937154, -3921083025048, 6031888476489, -4270334634108 ],
    [ 1, -124, 7074, -245848, 5807623, -98479668, 1233292284, -11549720016, 80887430655, -418423654692, 1554025246146, -3924241123032, 6039096233625, -4277638759212 ],
    [ 1, -124, 7074, -245844, 5807151, -98455744, 1232596188, -11536733448, 80724216303, -417019023324, 1545830189730, -3893160327588, 5969800578753, -4208591818728 ],
    [ 1, -124, 7074, -245844, 5807183, -98458496, 1232701276, -11539072136, 80757644463, -417337279452, 1547848434978, -3901381208100, 5989317926625, -4229169214248 ],
    [ 1, -124, 7074, -245844, 5807183, -98458464, 1232698844, -11538991368, 80756113455, -417319161372, 1547711359650, -3900733716132, 5987571965793, -4227111474696 ],
    [ 1, -124, 7074, -245844, 5807183, -98458432, 1232696476, -11538914760, 80754698223, -417302831772, 1547590847202, -3900178183140, 5986109440161, -4225427869608 ],
    [ 1, -124, 7074, -245844, 5807183, -98458400, 1232694108, -11538838152, 80753282991, -417286502172, 1547470334754, -3899622650148, 5984646914529, -4223744264520 ],
    [ 1, -124, 7074, -245844, 5807215, -98461216, 1232803868, -11541325768, 80789418671, -417635461980, 1549710968418, -3908848174308, 6006752130753, -4247231594760 ],
    [ 1, -124, 7074, -245844, 5807215, -98461184, 1232801500, -11541249288, 80788010607, -417619299420, 1549592529570, -3908307104676, 6005343352833, -4245631130664 ],
    [ 1, -124, 7074, -245844, 5807215, -98461152, 1232799068, -11541168520, 80786479599, -417601181340, 1549455454242, -3907659612708, 6003597392001, -4243573391112 ],
    [ 1, -124, 7074, -245844, 5807215, -98461152, 1232799132, -11541172680, 80786595375, -417602969820, 1549472017122, -3907751571684, 6003880827201, -4243947525576 ],
    [ 1, -124, 7074, -245844, 5807215, -98461120, 1232796764, -11541096072, 80785180143, -417586640220, 1549351504674, -3907196038692, 6002418301569, -4242263920488 ],
    [ 1, -124, 7074, -245844, 5807215, -98461088, 1232794332, -11541015432, 80783656047, -417568677660, 1549216295586, -3906561143844, 6000717690369, -4240274205384 ],
    [ 1, -124, 7074, -245844, 5807215, -98461088, 1232794396, -11541019464, 80783764911, -417570310620, 1549230992226, -3906640505700, 6000955775937, -4240580315400 ],
    [ 1, -124, 7074, -245844, 5807231, -98462512, 1232850396, -11542297416, 80802424591, -417751166844, 1550395002402, -3911439075300, 6012456211665, -4252791648600 ],
    [ 1, -124, 7074, -245844, 5807231, -98462480, 1232848028, -11542220936, 80801016399, -417734998524, 1550276459874, -3910897072548, 6011043234705, -4251183626232 ],
    [ 1, -124, 7074, -245844, 5807247, -98463840, 1232899292, -11543345672, 80816845743, -417883201308, 1551199548834, -3914585509284, 6019622818209, -4260035307528 ],
    [ 1, -124, 7074, -245844, 5807279, -98466528, 1232999260, -11545506440, 80846763375, -418158412700, 1552881737250, -3921174238500, 6034629650625, -4275180405000 ],
    [ 1, -124, 7074, -245840, 5806791, -98441228, 1232251004, -11531375488, 80667528831, -416605349844, 1543776322626, -3886529282352, 5957251485273, -4198045903524 ],
    [ 1, -124, 7074, -245840, 5806807, -98442492, 1232295228, -11532274560, 80679228255, -416706352308, 1544354437122, -3888643079088, 5961726927081, -4202220904020 ],
    [ 1, -124, 7074, -245840, 5806823, -98443980, 1232356092, -11533714176, 80700956991, -416923605972, 1545794567874, -3894750162864, 5976768833145, -4218623299044 ],
    [ 1, -124, 7074, -245840, 5806823, -98443948, 1232353660, -11533633408, 80699425983, -416905487892, 1545657492546, -3894102670896, 5975022872313, -4216565559492 ],
    [ 1, -124, 7074, -245840, 5806823, -98443916, 1232351228, -11533552640, 80697894975, -416887369812, 1545520417218, -3893455178928, 5973276911481, -4214507819940 ],
    [ 1, -124, 7074, -245840, 5806823, -98443916, 1232351292, -11533556800, 80698010751, -416889158292, 1545536980098, -3893547137904, 5973560346681, -4214881954404 ],
    [ 1, -124, 7074, -245840, 5806839, -98445244, 1232400188, -11534605056, 80712431775, -417021186996, 1546341422850, -3896692638768, 5980722754185, -4222118055060 ],
    [ 1, -124, 7074, -245840, 5806839, -98445212, 1232397820, -11534528448, 80711016543, -417004857396, 1546220910402, -3896137105776, 5979260228553, -4220434449972 ],
    [ 1, -124, 7074, -245840, 5806855, -98446700, 1232458620, -11535963520, 80732608255, -417219832980, 1547638464834, -3902110706736, 5993865854361, -4236228404100 ],
    [ 1, -124, 7074, -245840, 5806855, -98446668, 1232456252, -11535887040, 80731200191, -417203670420, 1547520025986, -3901569637104, 5992457076441, -4234627940004 ],
    [ 1, -124, 7074, -245840, 5806855, -98446636, 1232453884, -11535810560, 80729792127, -417187507860, 1547401587138, -3901028567472, 5991048298521, -4233027475908 ],
    [ 1, -124, 7074, -245840, 5806871, -98447964, 1232502716, -11536854656, 80744097375, -417317748084, 1548189467010, -3904082109360, 5997927270825, -4239889442100 ],
    [ 1, -124, 7074, -245836, 5806431, -98426728, 1231907036, -11526057912, 80611606863, -416200735404, 1541790993186, -3880221983100, 5945575372209, -4188528858096 ],
    [ 1, -124, 7074, -245836, 5806431, -98426696, 1231904604, -11525977144, 80610075855, -416182617324, 1541653917858, -3879574491132, 5943829411377, -4186471118544 ],
    [ 1, -124, 7074, -245836, 5806447, -98427992, 1231951132, -11526948792, 80623081647, -416298316428, 1542337848162, -3882164459004, 5949529293249, -4192023614112 ],
    [ 1, -124, 7074, -245836, 5806447, -98427960, 1231948764, -11526872184, 80621666415, -416281986828, 1542217335714, -3881608926012, 5948066767617, -4190340009024 ],
    [ 1, -124, 7074, -245836, 5806463, -98429448, 1232009628, -11528311544, 80643381071, -416498917932, 1543653526626, -3887688949308, 5963009576337, -4206591238608 ],
    [ 1, -124, 7074, -245836, 5806463, -98429448, 1232009692, -11528315832, 80643504015, -416500873452, 1543672163106, -3887795371644, 5963346759249, -4207048514064 ],
    [ 1, -124, 7074, -245836, 5806463, -98429416, 1232007260, -11528235064, 80641973007, -416482755372, 1543535087778, -3887147879676, 5961600798417, -4204990774512 ],
    [ 1, -124, 7074, -245836, 5806463, -98429384, 1232004828, -11528154296, 80640441999, -416464637292, 1543398012450, -3886500387708, 5959854837585, -4202933034960 ],
    [ 1, -124, 7074, -245836, 5806463, -98429384, 1232004892, -11528158456, 80640557775, -416466425772, 1543414575330, -3886592346684, 5960138272785, -4203307169424 ],
    [ 1, -124, 7074, -245836, 5806479, -98430840, 1232063324, -11529516920, 80660733999, -416665059980, 1544711400738, -3892008423996, 5973272228385, -4217400722304 ],
    [ 1, -124, 7074, -245836, 5806479, -98430776, 1232058524, -11529359800, 80657802223, -416630952396, 1544458073058, -3890835383292, 5970176182881, -4213834897536 ],
    [ 1, -124, 7074, -245836, 5806479, -98430776, 1232058588, -11529363960, 80657917999, -416632740876, 1544474635938, -3890927342268, 5970459618081, -4214209032000 ],
    [ 1, -124, 7074, -245836, 5806479, -98430744, 1232056156, -11529283320, 80656394031, -416614784076, 1544339530530, -3890293380540, 5968763205921, -4212226875168 ],
    [ 1, -124, 7074, -245836, 5806495, -98432136, 1232109788, -11530484536, 80673631439, -416779149420, 1545381058338, -3894522886908, 5978751567345, -4222679020560 ],
    [ 1, -124, 7074, -245836, 5806495, -98432104, 1232107356, -11530403896, 80672107599, -416761198380, 1545246056610, -3893889858300, 5977059354225, -4220704422000 ],
    [ 1, -124, 7074, -245832, 5806023, -98408068, 1231403004, -11517151536, 80504011647, -415300618692, 1536641220546, -3860935871112, 5902877276505, -4146087979836 ],
    [ 1, -124, 7074, -245832, 5806055, -98410820, 1231508092, -11519490224, 80537439807, -415618874820, 1538659465794, -3869156751624, 5922394624377, -4166665375356 ],
    [ 1, -124, 7074, -245832, 5806055, -98410788, 1231505660, -11519409456, 80535908799, -415600756740, 1538522390466, -3868509259656, 5920648663545, -4164607635804 ],
    [ 1, -124, 7074, -245832, 5806055, -98410756, 1231503292, -11519332848, 80534493567, -415584427140, 1538401878018, -3867953726664, 5919186137913, -4162924030716 ],
    [ 1, -124, 7074, -245832, 5806055, -98410724, 1231500924, -11519256240, 80533078335, -415568097540, 1538281365570, -3867398193672, 5917723612281, -4161240425628 ],
    [ 1, -124, 7074, -245832, 5806087, -98413572, 1231613116, -11521824624, 80570745023, -415935175428, 1540659074562, -3877271209800, 5941574789337, -4186785495420 ],
    [ 1, -124, 7074, -245832, 5806087, -98413572, 1231613180, -11521828912, 80570867967, -415937130948, 1540677711042, -3877377632136, 5941911972249, -4187242770876 ],
    [ 1, -124, 7074, -245832, 5806087, -98413540, 1231610748, -11521748144, 80569336959, -415919012868, 1540540635714, -3876730140168, 5940166011417, -4185185031324 ],
    [ 1, -124, 7074, -245832, 5806087, -98413508, 1231608316, -11521667376, 80567805951, -415900894788, 1540403560386, -3876082648200, 5938420050585, -4183127291772 ],
    [ 1, -124, 7074, -245832, 5806103, -98414964, 1231666812, -11523030000, 80588097951, -416101317476, 1541716948674, -3881590684488, 5951837441385, -4197594979116 ],
    [ 1, -124, 7074, -245832, 5806103, -98414900, 1231662012, -11522872880, 80585166175, -416067209892, 1541463620994, -3880417643784, 5948741395881, -4194029154348 ],
    [ 1, -124, 7074, -245832, 5806103, -98414900, 1231662076, -11522877168, 80585288991, -416069159652, 1541482153794, -3880523133000, 5949074379753, -4194478871532 ],
    [ 1, -124, 7074, -245832, 5806135, -98417652, 1231766844, -11525194544, 80618110111, -416377829028, 1543409732610, -3888230470920, 5966978596425, -4212888302700 ],
    [ 1, -124, 7074, -245828, 5805647, -98392176, 1231005276, -11510624232, 80430610095, -414727817148, 1533578230818, -3850194385620, 5880569509089, -4125253366872 ],
    [ 1, -124, 7074, -245828, 5805679, -98394960, 1231112796, -11513043688, 80465569263, -415064191356, 1535733551394, -3859062758100, 5901832817793, -4147888501944 ],
    [ 1, -124, 7074, -245828, 5805679, -98394928, 1231110364, -11512962920, 80464038255, -415046073276, 1535596476066, -3858415266132, 5900086856961, -4145830762392 ],
    [ 1, -124, 7074, -245828, 5805679, -98394896, 1231107932, -11512882152, 80462507247, -415027955196, 1535459400738, -3857767774164, 5898340896129, -4143773022840 ],
    [ 1, -124, 7074, -245828, 5805679, -98394864, 1231105564, -11512805544, 80461092015, -415011625596, 1535338888290, -3857212241172, 5896878370497, -4142089417752 ],
    [ 1, -124, 7074, -245828, 5805711, -98397712, 1231217820, -11515378088, 80498874479, -415380491964, 1537733160162, -3867177216276, 5921012982753, -4168008622008 ],
    [ 1, -124, 7074, -245828, 5805711, -98397712, 1231217884, -11515382376, 80498997423, -415382447484, 1537751796642, -3867283638612, 5921350165665, -4168465897464 ],
    [ 1, -124, 7074, -245828, 5805711, -98397680, 1231215388, -11515297320, 80497343471, -415362373884, 1537596084834, -3866529724308, 5919267021921, -4165950882456 ],
    [ 1, -124, 7074, -245828, 5805711, -98397680, 1231215452, -11515301608, 80497466415, -415364329404, 1537614721314, -3866636146644, 5919604204833, -4166408157912 ],
    [ 1, -124, 7074, -245828, 5805727, -98399072, 1231269148, -11516506984, 80514819343, -415530471452, 1538672595426, -3870955621332, 5929866856881, -4177217641608 ],
    [ 1, -124, 7074, -245828, 5805727, -98399040, 1231266652, -11516422056, 80513172687, -415510570908, 1538519070114, -3870217227924, 5927842406385, -4174795005480 ],
    [ 1, -124, 7074, -245828, 5805759, -98401824, 1231373916, -11518824232, 80547633295, -415838974812, 1540598138530, -3878649020180, 5947720542225, -4195551313800 ],
    [ 1, -124, 7074, -245824, 5805287, -98377692, 1230662524, -11505347040, 80375453631, -414332261748, 1531661439042, -3844210832352, 5869766376441, -4116765191220 ],
    [ 1, -124, 7074, -245824, 5805287, -98377660, 1230660092, -11505266272, 80373922623, -414314143668, 1531524363714, -3843563340384, 5868020415609, -4114707451668 ],
    [ 1, -124, 7074, -245824, 5805319, -98380508, 1230772540, -11507851552, 80412066751, -414688709556, 1533972471426, -3853833119136, 5893112828889, -4141915341300 ],
    [ 1, -124, 7074, -245824, 5805319, -98380476, 1230770044, -11507766496, 80410412799, -414668635956, 1533816759618, -3853079204832, 5891029685145, -4139400326292 ],
    [ 1, -124, 7074, -245824, 5805319, -98380444, 1230767548, -11507681440, 80408758847, -414648562356, 1533661047810, -3852325290528, 5888946541401, -4136885311284 ],
    [ 1, -124, 7074, -245824, 5805319, -98380444, 1230767612, -11507685728, 80408881791, -414650517876, 1533679684290, -3852431712864, 5889283724313, -4137342586740 ],
    [ 1, -124, 7074, -245824, 5805319, -98380412, 1230765180, -11507604960, 80407350783, -414632399796, 1533542608962, -3851784220896, 5887537763481, -4135284847188 ],
    [ 1, -124, 7074, -245824, 5805335, -98381836, 1230821308, -11508891104, 80426234719, -414816659924, 1534737558402, -3856751187552, 5899546376361, -4148152070436 ],
    [ 1, -124, 7074, -245824, 5805351, -98383260, 1230877436, -11510177120, 80445111231, -415000740980, 1535930208450, -3861701575776, 5911491350457, -4160917676916 ],
    [ 1, -124, 7074, -245824, 5805351, -98383228, 1230875004, -11510096480, 80443587647, -414982801972, 1535795432514, -3861070662240, 5909809028409, -4158961554132 ],
    [ 1, -124, 7074, -245820, 5804895, -98360408, 1230211036, -11497610008, 80284572495, -413591273100, 1527520789026, -3829035160620, 5836826954673, -4084613010720 ],
    [ 1, -124, 7074, -245820, 5804927, -98363192, 1230318556, -11500029464, 80319531663, -413927647308, 1529676109602, -3837903533100, 5858090263377, -4107248145792 ],
    [ 1, -124, 7074, -245820, 5804927, -98363160, 1230316124, -11499948696, 80318000655, -413909529228, 1529539034274, -3837256041132, 5856344302545, -4105190406240 ],
    [ 1, -124, 7074, -245820, 5804943, -98364616, 1230374748, -11501319896, 80338538543, -414113862956, 1530889695522, -3842976922092, 5870436059169, -4120572644496 ],
    [ 1, -124, 7074, -245820, 5804959, -98365976, 1230426012, -11502444504, 80354360463, -414261886924, 1531810494306, -3846648904812, 5878952750385, -4129324388640 ],
    [ 1, -124, 7074, -245820, 5804959, -98365944, 1230423516, -11502359576, 80352713935, -414241992396, 1531657081890, -3845911568940, 5876933245425, -4126910990400 ],
    [ 1, -124, 7074, -245820, 5804975, -98367400, 1230482140, -11503730520, 80373236975, -414445967980, 1533003144354, -3851599293036, 5890897724481, -4142089995120 ],
    [ 1, -124, 7074, -245816, 5804519, -98344532, 1229814524, -11491123088, 80211936447, -413027530596, 1524526336962, -3818617421112, 5815392167673, -4064807267532 ],
    [ 1, -124, 7074, -245816, 5804519, -98344500, 1229812092, -11491042320, 80210405439, -413009412516, 1524389261634, -3817969929144, 5813646206841, -4062749527980 ],
    [ 1, -124, 7074, -245816, 5804551, -98347348, 1229924540, -11493627600, 80248549567, -413383978404, 1526837369346, -3828239707896, 5838738620121, -4089957417612 ],
    [ 1, -124, 7074, -245816, 5804551, -98347316, 1229922044, -11493542544, 80246895615, -413363904804, 1526681657538, -3827485793592, 5836655476377, -4087442402604 ],
    [ 1, -124, 7074, -245816, 5804567, -98348772, 1229980732, -11494918032, 80267556447, -413570194052, 1528050955266, -3833313096888, 5851084415913, -4103281916316 ],
    [ 1, -124, 7074, -245816, 5804567, -98348740, 1229978236, -11494832976, 80265902495, -413550120452, 1527895243458, -3832559182584, 5849001272169, -4100766901308 ],
    [ 1, -124, 7074, -245816, 5804567, -98348708, 1229975740, -11494747920, 80264248543, -413530046852, 1527739531650, -3831805268280, 5846918128425, -4098251886300 ],
    [ 1, -124, 7074, -245816, 5804583, -98350164, 1230034428, -11496123280, 80284901823, -413736150756, 1529106407362, -3837614797368, 5861277612729, -4113978492492 ],
    [ 1, -124, 7074, -245816, 5804583, -98350132, 1230031996, -11496042768, 80283385791, -413718397092, 1528974053442, -3837001658040, 5859664745913, -4112135277228 ],
    [ 1, -124, 7074, -245816, 5804615, -98352948, 1230141692, -11498525072, 80319339903, -414064006180, 1531178383042, -3845995213368, 5880958125273, -4134419458092 ],
    [ 1, -124, 7074, -245812, 5804111, -98325888, 1229311708, -11482257096, 80105106735, -412136472924, 1519445101986, -3799655055108, 5773567052385, -4023395259048 ],
    [ 1, -124, 7074, -245812, 5804143, -98328672, 1229419228, -11484676552, 80140065903, -412472847132, 1521600422562, -3808523427588, 5794830361089, -4046030394120 ],
    [ 1, -124, 7074, -245812, 5804143, -98328640, 1229416796, -11484595784, 80138534895, -412454729052, 1521463347234, -3807875935620, 5793084400257, -4043972654568 ],
    [ 1, -124, 7074, -245812, 5804175, -98331520, 1229531740, -11487266120, 80178332975, -412849368540, 1524067166754, -3818899628676, 5820259957281, -4073695559208 ],
    [ 1, -124, 7074, -245812, 5804175, -98331488, 1229529180, -11487176648, 80176548655, -412827160348, 1523890519074, -3818022713604, 5817775991841, -4070621651976 ],
    [ 1, -124, 7074, -245812, 5804175, -98331488, 1229529244, -11487181064, 80176679023, -412829294940, 1523911454946, -3818145714372, 5818176813537, -4071180544200 ],
    [ 1, -124, 7074, -245812, 5804207, -98334304, 1229639132, -11489676744, 80213031407, -413181473564, 1526180615586, -3827521999620, 5840721622593, -4095212909832 ],
    [ 1, -124, 7074, -245812, 5804239, -98337120, 1229748828, -11492158920, 80248978095, -413526904604, 1528382686754, -3836499587844, 5861955395681, -4117405386248 ],
    [ 1, -124, 7074, -245808, 5803751, -98311404, 1228968956, -11476979904, 80049950271, -411740917524, 1517528310210, -3793671501840, 5762763919737, -4014907083396 ],
    [ 1, -124, 7074, -245808, 5803783, -98314252, 1229081468, -11479569472, 80088217343, -412117438932, 1519995054402, -3804047702928, 5788193515929, -4042572248484 ],
    [ 1, -124, 7074, -245808, 5803783, -98314220, 1229078972, -11479484416, 80086563391, -412097365332, 1519839342594, -3803293788624, 5786110372185, -4040057233476 ],
    [ 1, -124, 7074, -245808, 5803815, -98317068, 1229191356, -11482065024, 80124562047, -412469425940, 1522261670402, -3813405018192, 5810663053305, -4066480415844 ],
    [ 1, -124, 7074, -245808, 5803815, -98317068, 1229191420, -11482069568, 80124700095, -412471752148, 1522285150914, -3813546988944, 5811139146681, -4067163506340 ],
    [ 1, -124, 7074, -245804, 5803359, -98294120, 1228517468, -11469242872, 79959069135, -410999928876, 1513387660194, -3778495830108, 5729824497969, -3982754902896 ],
    [ 1, -124, 7074, -245804, 5803407, -98298424, 1228688732, -11473212344, 80018127407, -411584874124, 1517244637986, -3794822335260, 5770083855393, -4026818473920 ],
    [ 1, -124, 7074, -245804, 5803407, -98298392, 1228686172, -11473122872, 80016343087, -411562665932, 1517067990306, -3793945420188, 5767599889953, -4023744566688 ],
    [ 1, -124, 7074, -245804, 5803439, -98301240, 1228798556, -11475703352, 80054334063, -411934534924, 1519487773474, -3804037679772, 5792077299393, -4050043550784 ],
    [ 1, -124, 7074, -245800, 5802999, -98279700, 1228179644, -11464131440, 79907093919, -410642475620, 1511762505858, -3773905393896, 5722818650505, -3978788673420 ],
    [ 1, -124, 7074, -245800, 5803031, -98282612, 1228297276, -11466899952, 79948929631, -411063413412, 1514582545410, -3786035425128, 5753216177577, -4012601652972 ],
    [ 1, -124, 7074, -245800, 5803047, -98284004, 1228350844, -11468096112, 79965998783, -411224711172, 1515590903618, -3790051835240, 5762450357433, -4021918248348 ],
    [ 1, -124, 7074, -245796, 5802575, -98259600, 1227618140, -11453889960, 79779603375, -409545128700, 1505311973154, -3749115724596, 5666564595681, -3921537151224 ],
    [ 1, -124, 7074, -245796, 5802607, -98262448, 1227730652, -11456479528, 79817870447, -409921650108, 1507778717346, -3759491925684, 5691994191873, -3949202316312 ],
    [ 1, -124, 7074, -245796, 5802655, -98266784, 1227904476, -11460538216, 79878697679, -410528420060, 1511807243298, -3776657252852, 5734585957617, -3996088888968 ],
    [ 1, -124, 7074, -245792, 5802183, -98242332, 1227167868, -11446193312, 79689487743, -408813199092, 1501239860802, -3734263798848, 5634498154329, -3890413840500 ],
    [ 1, -124, 7074, -245792, 5802215, -98245180, 1227280380, -11448782880, 79727754815, -409189720500, 1503706604994, -3744639999936, 5659927750521, -3918079005588 ],
    [ 1, -124, 7074, -245792, 5802247, -98248092, 1227398012, -11451551392, 79769590527, -409610658292, 1506526644546, -3756770031168, 5690325277593, -3951891985140 ],
    [ 1, -124, 7074, -245788, 5801839, -98229384, 1226890204, -11442515224, 79659449199, -408679363884, 1501132836258, -3736291547340, 5644302055425, -3905399138256 ],
    [ 1, -124, 7074, -245780, 5801007, -98190528, 1225817052, -11423103368, 79419140847, -406617410268, 1489023523746, -3689708021604, 5538298830273, -3797043908328 ],
    [ 1, -124, 7074, -245776, 5800615, -98173260, 1225366780, -11415406720, 79329025215, -405885480660, 1484951411394, -3674856095856, 5506232388921, -3765920597604 ]
];

checkLemma54:=procedure()
	P<x>:=PolynomialRing(Rationals());
	print "--- Candidates for char polys corresponding to 49 lines ---";
	print "";
	cand49red:=all194polys;
	print "Candidates for char poly:";
	for i in [1..#cand49red] do
		ff:=P!Polynomial(Reverse(cand49red[i]))*(x+5)^32*(x-9)^4;
		print i, Factorisation(ff);
	end for;
	print "";
	inds:=[i : i in [2..3]] cat [i : i in [5..5]] cat [i : i in [7..8]] cat [i : i in [11..12]] cat [i : i in [14..14]] cat [i : i in [16..21]] cat [i : i in [23..23]] cat [i : i in [26..29]] cat [i : i in [31..34]] cat [i : i in [36..41]] cat [i : i in [43..51]] cat [i : i in [53..57]] cat [i : i in [59..60]] cat [i : i in [62..70]] cat [i : i in [72..72]] cat [i : i in [74..84]] cat [i : i in [87..88]] cat [i : i in [90..101]] cat [i : i in [103..121]] cat [i : i in [123..126]] cat [i : i in [128..129]] cat [i : i in [131..141]] cat [i : i in [143..156]] cat [i : i in [158..166]] cat [i : i in [168..185]] cat [i : i in [187..193]];
	cand49:=[cand49red[inds[i]] : i in [1..164]];
	FarkasCertificates:=[
		[-5488432, 0, 0, -2469, -274],
		[-63703708, 0, 0, -31134, -4447],
		[0, 0, 0, 0, -24516, -11277, -2933], 
		[64094624850, 0, 0, 13282715, 1315121, 131512],
		[0, 0, 0, 0, -32892, -14918, -3771],
		[0, 0, 0, 2179953, 598246, 95219, 12792],
		[0, 0, 0, 0, -46941, -21298, -5385],
		[0, 0, 0, 2020374, 527071, 75373, 8375],
		[0, 0, 0, 0, -186488, -84667, -21412], 
		[0, 0, 0, 2213481, 577512, 82588, 9177],
		[0, 0, 0, 262395, 85409, 13919],
		[0, 0, 0, 0, -50486, -22673, -5606],
		[0, 0, 0, 0, -166968, -76347, -19567],
		[0, 0, 0, -761, -407],
		[0, 0, 0, 0, 0, 48433, 27206, 8450], 
		[43568416850, 0, 0, 8939852, 867947, 86794],
		[418335562857, 0, 0, 50603993, 5042602, 533922, 59325],
		[0, 0, 0, 2951038, 757444, 105637, 11738],
		[2170237224, 0, 0, 518291, 54779, 5899],
		[0, 0, 0, -102473516, -26628634, -4344437, -608687, -79085],
		[0, 0, 0, 3027878, 841889, 137248, 19051], 
		[0, 0, 0, 3424439, 942309, 150950, 20564],
		[-350855974043, 0, 0, -36070743, -2365294, -118265, 0],
		[0, 0, 0, 19725270, 5270911, 802935, 104149],
		[0, 0, 0, 27926, 10159, 2010],
		[0, 0, 0, 2358490, 648675, 103793, 14105],
		[0, 0, 0, 0, -11689, -5069, -1158], 
		[-4870391404, 0, 0, -1228192, -147036, -17299],
		[0, 0, 0, 0, 0, 0, 0, -2769, -2722],
		[0, 0, 0, 0, 0, 49785, 28128, 8819],
		[0, 0, 0, 2693660, 663478, 83879, 7626],
		[0, 0, 0, 2151377, 521244, 62701, 4824], 
		[0, 0, 0, 0, 0, 2730500, 1336652, 374346, 80967],
		[0, 0, 0, -3968275, -1342119, -230256],
		[0, 0, 0, 0, -21822, -9463, -2157],
		[0, 0, 0, 0, -1569046, -573439, -115384, -17518],
		[4598007557155, 0, 0, 531045255, 47338744, 4256617, 386966],
		[0, 0, 0, 0, -3978492, -1477259, -314027, -53170], 
		[20419347700, 0, 0, 4029188, 354569, 32233],
		[0, 0, 0, 0, 0, 5733949, 2909745, 855377, 195699],
		[0, 0, 0, 0, 0, 14228263, 7055510, 2012098, 444987],
		[0, 0, 0, 5766425, 1554289, 240786, 31992],
		[400497673181, 0, 0, 46699387, 3348961, 186053, 0],
		[695180798312, 0, 0, 89011625, 8091966, 735633, 66876], 
		[0, 0, -83458849775, -11996698757, -1188052506, -118190915, -11828260, -1191996],
		[0, 0, 0, 0, -21332, -9279, -2128],
		[0, 0, 0, 0, 0, -48253, -17954, 0],
		[0, 0, -61036254227, -8328939996, -759497210, -69872634, -6493326, -610484],
		[0, 0, 0, -3673067283, -954462930, -155719105, -21817365, -2834629],
		[0, 0, 0, 3242353, 857188, 128112, 16317], 
		[0, 0, 0, -136206225, -35394372, -5774558, -809058, -105118],
		[0, 0, 0, 0, 8891029, 3501307, 607418],
		[0, 0, 0, 0, 0, 5173067, 2563924, 730730, 161530],
		[-43386189, 0, 0, -21122, -1920],
		[0, 0, 0, -103422864, -26769889, -4290940, -589184, -74958],
		[0, 0, 0, -100965325, -26236718, -4280496, -599729, -77921], 
		[-1299165141433, 0, 0, -149992114, -13410925, -1221759, -113651],
		[0, 0, 11091944806, 1414982133, 88436388, 0, -1403751, -356509],
		[-2370518793825, 0, 0, -304205617, -28068180, -2673161, -267316],
		[0, 0, 0, 0, -1329832, -537956, -127678, -24303],
		[0, 0, -77300917310, -10532936094, -956541670, -87328370, -8017435, -740071],
		[0, 0, 0, -3659439217, -950921617, -155141345, -21736416, -2824112], 
		[0, 0, 0, 1667190, 446418, 67961, 8668],
		[0, 0, -27280263472, -3518058798, -293088094, -25041704, -2203669, -200334],
		[0, 0, 0, 0, 0, 0, -1064222, 0, 285444, 160397],
		[0, 0, 0, 0, 0, 2337512, 1158887, 330521, 73173],
		[0, 0, 0, 0, -1531587, -589537, -129964, -22695], 
		[0, 0, 0, 0, -35406, -15155, -3334],
		[0, 0, 0, -71612334, -18804223, -3075477, -431366, -56080],
		[0, 0, 0, 0, 0, -12974, 0, 4359],
		[0, 0, 0, 0, 0, 4677012, 2215622, 593361, 122148],
		[0, 0, 0, -379426866, -98595447, -16085678, -2253718, -292816],
		[0, 0, 0, 0, -1001181, -347490, -65629, -9371], 
		[-18918837294, 0, 0, -5728490, -787474, -108085],
		[0, 0, 0, -15349003083, -3936212014, -661763942, -97017114, -13355954, -1781204],
		[0, 0, 0, 0, 0, -60315, -31871, -8411],
		[0, 0, 0, 3059218, 768048, 97759, 8888],
		[0, 0, 0, -314129288, -78844475, -12081240, -1578458, -190430],
		[0, 0, 0, -64158067, -16846854, -2755344, -386464, -50242], 
		[0, 0, 0, 0, -1704397, -620000, -127433, -20664],
		[0, 0, 0, 0, 0, 2880320, 1487377, 443235, 102448],
		[0, 0, 0, 0, 0, 262016, 152699, 49290],
		[0, 0, 0, -106796999, -28043138, -4586523, -643306, -83633],
		[0, 0, 0, 0, -6215064, -2516920, -598732, -114475],
		[0, 0, 0, 0, 0, 955948, 429395, 105520, 19167], 
		[48031592256, 0, 0, 11040701, 1115611, 115408],
		[0, 0, 0, 0, 0, 0, -2143032, -1241360, -401833, -97740],
		[0, 0, 0, 0, 0, 0, -14047613, -8488569, -2909072, -758148],
		[0, 0, 0, 0, -1552628, -531841, -97912, -13407],
		[0, 0, 0, 0, 0, 0, -2618443, -1505910, -482407, -115715],
		[1617153799881, 0, 0, 197697391, 16639510, 1426243, 125110], 
		[7063410652, 0, 0, 1589426, 144494, 13135],
		[0, 0, 0, -114103753, -29961502, -4900266, -687311, -89354],
		[0, 0, 0, 0, 31817, 13173, 2468],
		[0, 0, 0, 0, -10677039, -3964370, -842610, -142646],
		[0, 0, 0, 22638, 7941, 1375],
		[0, 0, 0, 0, 0, 6344046, 3245585, 956303, 218771], 
		[0, 0, 0, -495338005, -121177788, -17614437, -2088461, -208847],
		[0, 0, 0, -393778194, -103398759, -16911081, -2371948, -308363],
		[0, 0, 0, 0, 0, 0, 12429, 8163, 2762],
		[0,0,0,0,0,0,0,0,1119,1234],
		[-3885730122, 0, 0, -718522, -32660, -1], 
		[-992098071642, 0, 0, -118216298, -9445854, -744219, -57247],
		[565131071791, 0, 0, 85703268, 9084766, 985095, 109456],
		[0, 0, 0, -138176827, -36282640, -5934101, -832316, -108205],
		[0, 0, 0, 0, -1213093, -449831, -95266, -15983],
		[0, 0, 0, 89931451, 24948054, 4341823, 647628, 89588],
		[0, 0, -19060138333, -2884207282, -300173384, -30699551, -3100964, -310097], 
		[0, 0, 0, 0, 0, 9599576, 4809061, 1377672, 305452],
		[0, 0, -27750045610, -4064194735, -408278612, -41428056, -4245277, -439167],
		[0, 0, 0, 1087426, 314758, 52603, 7448],
		[0, 0, 0, 0, 0, 0, -1337775, -752950, -233517, -53538],
		[-2169430180, 0, 0, -198141, 4, 0, 0],
		[289768164194, 0, 0, 45345884, 5038432, 559825, 62203], 
		[0, 0, 0, -70323109, -18465693, -3020109, -423600, -55070],
		[0, 0, 0, -89288753, -23286483, -3710063, -501572, -62051],
		[0, 0, 0, 0, 0, -15046, -7958, -2003],
		[0, 0, -55007201398, -7858513065, -756481319, -73298937, -7158493, -705767],
		[0, 0, 0, 0, -7607112, -2990049, -680855, -123814],
		[0, 0, 0, 0, 0, 0, -2570051, -1576448, -546592, -143665], 
		[64738987904, 0, 0, 7963177, 461283, 0, -6621],
		[0, 0, -312204467074, -43839706334, -4468167233, -463940452, -49178872, -5332649, -592516],
		[0, 0, 0, -62996931, -16541959, -2705478, -379470, -49333],
		[0, 0, -34501373844, -4771922844, -433811167, -39437379, -3585216, -325929],
		[0, 0, 0, -1169094984, -287376982, -42813875, -5458939, -645630],
		[0, 0, 12829413037, 1887211369, 175111560, 14517041, 907320, 0], 
		[0, 0, 0, 0, 0, 0, 0, -37148, -30261, -13559],
		[-178847202626, 0, 0, -25013595, -2273963, -206724, -18793],
		[1111960200, 0, 0, 365603, 48288, 6898],
		[0, 0, 0, -112031224, -29417295, -4811260, -674827, -87731],
		[0, 0, 0, 0, 0, 4443929, 2128486, 571736, 117372],
		[0, 0, -34375141077, -4754463451, -432223950, -39293087, -3572098, -324737], 
		[0, 0, 0, 864770601, 222403153, 33916787, 4279939, 475548],
		[0, 0, 0, -3973255445, -998404736, -161564034, -22554302, -2924465, -362979],
		[0, 0, 0, 6247855, 1847930, 310209, 44003],
		[0,0,0,0,0,0,0,0,1137,1309],
		[1294707168, 0, 0, 237202, 10317, 0], 
		[39494208, 0, 0, 21372, 1645],
		[11007285490, 0, 0, 2883349, 285481, 28548],
		[0, 0, 0, 0, -16028637, -6112248, -1330674, -230596],
		[72932423060, 0, 0, 11832901, 1179751, 117975, 11798],
		[0, 0, 0, 0, -2848088, -1208753, -297136, -57413],
		[0, 0, 0, -364965233, -96892815, -15887789, -2230938, -290213], 
		[0, 0, 0, -55660, -20011, -3553],
		[-1400886, 0, 0, -911, 0],
		[-2655400442, 0, 0, -824349, -91594, -10178],
		[163604694365, 0, 0, 26168863, 2536575, 246500, 23855],
		[0, 0, 0, -316467666, -81782200, -12927692, -1754267, -221407],
		[0, 0, 0, -411875739, -126767583, -24943894, -4253740, -676710], 
		[0, 0, 0, 0, 0, 0, 2204, 2101],
		[0, 0, 0, 0, -2336823, -882211, -189036, -32146],
		[0, 0, 0, 0, -8943902, -3542882, -788607, -138366],
		[0, 0, 0, -2568167, -756561, -121188, -16321],
		[1294235800, 0, 0, 373032, 20725, -1],
		[0, 0, 0, 0, -1467454, -617730, -151051, -29543], 
		[949975748, 0, 0, 235960, 21451, 1950],
		[0, 0, 0, 24726, 11067, 2893],
		[0, 0, 0, 1421580, 478465, 97821, 16654],
		[-364383063, 0, 0, -124960, -13884, -1543],
		[519279994, 0, 0, 161166, 17908, 1989],
		[0, 0, 0, -4803, -1591, -145], 
		[-64725455, 0, 0, -25323, -2681, -298],
		[-3135702600, 0, 0, -1171021, -104988, -8077],
		[0, 0, 0, -84876, -27407, -2492]
		];
		bag:=[];
		for i in [1..#cand49] do
			ff:=P!Polynomial(Reverse(cand49[i]))*(x+5)^32*(x-9)^4;
			gcd:=GCD(ff,Derivative(ff));
			ms:=P!(ff/gcd);
			g:=P!(Derivative(ff)/gcd);
			deg:=Degree(ms);
			f:=ms+48*x^(deg-2);
			coeffs:=Reverse(Coefficients(f));
			gf:=x^(deg-3)*P!(Polynomial([coeffs[3],coeffs[2],coeffs[1]]));
			ggf:=Evaluate(gf,x-1);
			clist:=Reverse(Coefficients(ggf));
			print "------- Infeasibility of", Factorisation(ff), "-------";
			print "";
			tic := Cputime();
			ll:=getCoeffsType2(deg-1,[clist[1],clist[2],clist[3]]);
			llpol:=[Evaluate(P!Polynomial(Reverse(l)),x+1) : l in ll];
			ll2:=[Reverse(Coefficients(l)) : l in llpol];
			bag cat:= [listInterlaceReduce(ll2,ms)];
			tt:=Cputime(tic);
			print "Time taken to compute interlacing char polys:", tt,"seconds";
			print "";
			numrows:=#bag[i];
			m:=Matrix(Rationals(),numrows,deg,[bag[i][j] : j in [1..numrows]]);
			gg:=Vector(Reverse(Coefficients(g)));
			print "Coefficient matrix A for interlacing char polys";
			print m;
			print "";
			mm:=Vector(Rationals(),FarkasCertificates[i]);
			print "Certificate of infeasibility c:";
			print "c =", mm;
			ac:=mm*Transpose(m);
			print "Ac >= 0:", isAtLeastZero(ac);
			print "Ac =", ac;
			innerprod:=&+[gg[j]*mm[j] : j in [1..deg]];
			print "<g,c> < 0:", innerprod lt 0;
			print "<g,c> =", innerprod;
			print "";
		end for;
end procedure;

checkLemma54MakeTable:=procedure()
	P<x>:=PolynomialRing(Rationals());
	cand49red:=all194polys;
	inds:=[i : i in [2..3]] cat [i : i in [5..5]] cat [i : i in [7..8]] cat [i : i in [11..12]] cat [i : i in [14..14]] cat [i : i in [16..21]] cat [i : i in [23..23]] cat [i : i in [26..29]] cat [i : i in [31..34]] cat [i : i in [36..41]] cat [i : i in [43..51]] cat [i : i in [53..57]] cat [i : i in [59..60]] cat [i : i in [62..70]] cat [i : i in [72..72]] cat [i : i in [74..84]] cat [i : i in [87..88]] cat [i : i in [90..101]] cat [i : i in [103..121]] cat [i : i in [123..126]] cat [i : i in [128..129]] cat [i : i in [131..141]] cat [i : i in [143..156]] cat [i : i in [158..166]] cat [i : i in [168..185]] cat [i : i in [187..193]];
	cand49:=[cand49red[inds[i]] : i in [1..164]];
	bag:=[];
	for i in [1..#cand49] do
		ff:=P!Polynomial(Reverse(cand49[i]))*(x+5)^32*(x-9)^4;
		gcd:=GCD(ff,Derivative(ff));
		ms:=P!(ff/gcd);
		g:=P!(Derivative(ff)/gcd);
		deg:=Degree(ms);
		f:=ms+48*x^(deg-2);
		coeffs:=Reverse(Coefficients(f));
		gf:=x^(deg-3)*P!(Polynomial([coeffs[3],coeffs[2],coeffs[1]]));
		ggf:=Evaluate(gf,x-1);
		clist:=Reverse(Coefficients(ggf));
		tic := Cputime();
		ll:=getCoeffsType2(deg-1,[clist[1],clist[2],clist[3]]);
		llpol:=[Evaluate(P!Polynomial(Reverse(l)),x+1) : l in ll];
		ll2:=[Reverse(Coefficients(l)) : l in llpol];
		bag cat:= [listInterlaceReduce(ll2,ms)];
		tt:=Cputime(tic);
		print "(", i, ",", tt, ")";
	end for;
end procedure;

Lemma54PrintLongTimers:=procedure(pp)
	P<x>:=PolynomialRing(Rationals());
	cand49red:=pp;
	inds:=[i : i in [2..3]] cat [i : i in [5..5]] cat [i : i in [7..8]] cat [i : i in [11..12]] cat [i : i in [14..14]] cat [i : i in [16..21]] cat [i : i in [23..23]] cat [i : i in [26..29]] cat [i : i in [31..34]] cat [i : i in [36..41]] cat [i : i in [43..51]] cat [i : i in [53..57]] cat [i : i in [59..60]] cat [i : i in [62..70]] cat [i : i in [72..72]] cat [i : i in [74..84]] cat [i : i in [87..88]] cat [i : i in [90..101]] cat [i : i in [103..121]] cat [i : i in [123..126]] cat [i : i in [128..129]] cat [i : i in [131..141]] cat [i : i in [143..156]] cat [i : i in [158..166]] cat [i : i in [168..185]] cat [i : i in [187..193]];
	cand49:=[cand49red[inds[i]] : i in [1..164]];
	for i in [65,87,88,90,101,112] do
		ff:=P!Polynomial(Reverse(cand49[i]))*(x+5)^32*(x-9)^4;
		print i, Factorisation(ff);
	end for;
end procedure;


getInterlacingCharacteristicPolynomials:=function(mp,qp,n)
	P<x>:=PolynomialRing(Rationals());
	d:=Degree(mp)-1;
	aa:=Reverse(Coefficients(mp));
	q:=x^d+aa[2]*x^(d-1)+(aa[3]+n)*x^(d-2);
	qq:=Evaluate(q,x-1);
	bb:=Reverse(Coefficients(qq));
	ll2:=getCoeffsType2(d,[1,bb[2],bb[3]]);
	llshift2:=[P!(Evaluate(Polynomial(Reverse(l)),x+1)) : l in ll2];
	lllist2:=[Reverse(Coefficients(l)) : l in llshift2];
	llred2:=listInterlaceReduce(lllist2,mp);
	return listPowerReduce(llred2,qp);
end function;

getInterlacingCharacteristicPolynomials48:=function(mp,qp)
	P<x>:=PolynomialRing(Rationals());
	d:=Degree(mp)-1;
	aa:=Reverse(Coefficients(mp));
	q:=x^d+aa[2]*x^(d-1)+(aa[3]+48)*x^(d-2);
	qq:=Evaluate(q,x-1);
	bb:=Reverse(Coefficients(qq));
	ll2:=getCoeffsType2(d,[1,bb[2],bb[3]]);
	llshift2:=[P!(Evaluate(Polynomial(Reverse(l)),x+1)) : l in ll2];
	lllist2:=[Reverse(Coefficients(l)) : l in llshift2];
	llred2:=listInterlaceReduce(lllist2,mp);
	return listPowerReduce(llred2,qp);
end function;

getInterlacingCharacteristicPolynomials2:=function(mp,qp,n,k)
	P<x>:=PolynomialRing(Rationals());
	d:=Degree(mp)-1;
	aa:=Reverse(Coefficients(mp));
	q:=x^d+aa[2]*x^(d-1)+(aa[3]+n)*x^(d-2);
	qq:=Evaluate(q,x-1);
	bb:=Reverse(Coefficients(qq));
	ll2:=getCoeffsWeaklyType2(d,[1,bb[2],bb[3]]);
	llshift2:=[P!(Evaluate(Polynomial(Reverse(l)),x+1)) : l in ll2];
	lllist2:=[Reverse(Coefficients(l)) : l in llshift2];
	llred2:=listInterlaceReduce(lllist2,mp);
	return listPowerReduceOdd(llred2,qp,n,k);
end function;

isCompSlow:=function(simpInds,q,froots,sqrts,n)
	print "doing hard work!";
	print n;
	MinPolys:=[];
	for c in CartesianPower({-1,1},#simpInds-1) do
		chk:=Evaluate(q,froots[simpInds[1]])*sqrts[1]+&+[c[i]*Evaluate(q,froots[simpInds[i+1]])*sqrts[i+1] : i in [1..#simpInds-1]];
		flag2:=true;
		if #MinPolys gt 0 then
			for p in MinPolys do
				if Evaluate(p,chk) eq 0 then
					flag2:=false;
				end if;
			end for;
		end if;
		if flag2 then
			MinPolys cat:=[MinimalPolynomial(chk)];
		end if;
	end for;
	d1S:=Set([p : p in MinPolys | Degree(p) eq 1]);
	if #d1S eq 0 then
		// print "polys are not compatible";
		return false;
	end if;
	if n mod 2 eq 1 then
		for p in d1S do
			if not Coefficients(p)[1] in Integers() then
				continue;
			end if;
			if (Integers()!( Evaluate(q,1) - Evaluate(q,0) ) ) mod 2 eq (Integers()!Coefficients(p)[1]) mod 2 then
				print "Seidel-Compatible!";
				return true;
			end if;
		end for;
		return false;
	end if;
	return true;
end function;

isCompt:=function(fff,f1p,f2p,mpd,xi)
	print "checking the slow way...";
	P<x>:=PolynomialRing(Rationals());
	AC:=AlgebraicClosure();
	PK<z>:=PolynomialRing(AC);
	ggroots:=Roots(fff,AC);
	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];
	af1:=Vector(AC,[Evaluate(f1p,froots[i])/Evaluate(mpd,froots[i]) : i in [1..#froots]]);
	af2:=Vector(AC,[Evaluate(f2p,froots[i])/Evaluate(mpd,froots[i]) : i in [1..#froots]]);
	// froots:=[AC!ffroots[i] : i in [1..#ffroots]];
	q:=1;
	simpInds:=[];
	for i in [1..#froots] do
		if Evaluate(xi,froots[i]) eq 0 then
			simpInds cat:=[i];
		else
			q*:=(z-froots[i]);
		end if;
	end for;
	sqrts:=[SquareRoot(af2[simpInds[i]]*af1[simpInds[i]]) : i in [1..#simpInds]];
	// sqrts+=[(z^2-af2[simpInds[i]]*af1[simpInds[i]]).roots(QQbar)[0][0] for i in range(len(simpInds))]
	split:=Floor(#simpInds/2);
	print simpInds;
	if #simpInds eq 0 then
		print "no simple eigenvalues???";  
	end if; 
	if #simpInds eq 1 then
		if Degree(MinimalPolynomial(Evaluate(q,froots[simpInds[1]])*sqrts[1])) gt 1 then
			// print "polys are not compatible";
			// print MinimalPolynomial(Evaluate(q,froots[simpInds[1]])*sqrts[1]);
			return false;
		end if;  
	end if; 
	if #simpInds gt 1 then
		if split eq 1 then
			if not isCompSlow(simpInds,q,froots,sqrts,Degree(fff)) then
				return false;
			end if;
		end if;
		if #simpInds eq 4 then
			split:=1;
			firstHalfMinPolys:=[];
			chk:=Evaluate(q,froots[simpInds[1]])*sqrts[1];
			firstHalfMinPolys:=[MinimalPolynomial(chk)];
			print [Degree(p) : p in firstHalfMinPolys];
		    // #     second half
			secondHalfMinPolys:=[];
			for c in CartesianPower({-1,1},#simpInds-split-1) do
				chk:=Evaluate(q,froots[simpInds[split+1]])*sqrts[split+1]+&+[c[i]*Evaluate(q,froots[simpInds[i+split+1]])*sqrts[i+split+1] : i in [1..#simpInds-split-1]];
				flag:=true;
				if #secondHalfMinPolys gt 0 then
					for p in secondHalfMinPolys do
						if Evaluate(p,chk) eq 0 then
							flag:=false;
						end if;
					end for;
				end if;
				if flag then
					secondHalfMinPolys cat:=[MinimalPolynomial(chk)];
				end if;
			end for;
			print [Degree(p) : p in secondHalfMinPolys];
			if Set([Degree(p) : p in firstHalfMinPolys]) meet Set([Degree(p) : p in secondHalfMinPolys]) eq {} then
				// print "polys are not compatible"; 
				return false;
			else
				if not isCompSlow(simpInds,q,froots,sqrts,Degree(fff)) then
					return false;
				end if;
			end if;    
		end if;
		if split ge 2 and #simpInds-split ge 3 then
			// #     first half
			firstHalfMinPolys:=[];
			for c in CartesianPower({-1,1},split-1) do
				chk:=Evaluate(q,froots[simpInds[1]])*sqrts[1]+&+[c[i]*Evaluate(q,froots[simpInds[i+1]])*sqrts[i+1] : i in [1..split-1]];
				flag:=true;
				if #firstHalfMinPolys gt 0 then
					for p in firstHalfMinPolys do
						if Evaluate(p,chk) eq 0 then
							flag:=false;
						end if;
					end for;
				end if;
				if flag then
					firstHalfMinPolys cat:=[MinimalPolynomial(chk)];
				end if;
				// print firstHalfMinPolyDegs;
			end for;
			print [Degree(p) : p in firstHalfMinPolys];
		    // #     second half
			secondHalfMinPolys:=[];
			for c in CartesianPower({-1,1},#simpInds-split-1) do
				chk:=Evaluate(q,froots[simpInds[split+1]])*sqrts[split+1]+&+[c[i]*Evaluate(q,froots[simpInds[i+split+1]])*sqrts[i+split+1] : i in [1..#simpInds-split-1]];
				flag:=true;
				if #secondHalfMinPolys gt 0 then
					for p in secondHalfMinPolys do
						if Evaluate(p,chk) eq 0 then
							flag:=false;
						end if;
					end for;
				end if;
				if flag then
					secondHalfMinPolys cat:=[MinimalPolynomial(chk)];
				end if;
			end for;
			print [Degree(p) : p in secondHalfMinPolys];
			if Set([Degree(p) : p in firstHalfMinPolys]) meet Set([Degree(p) : p in secondHalfMinPolys]) eq {} then
				// print "polys are not compatible"; 
				return false;
			else
				if not isCompSlow(simpInds,q,froots,sqrts,Degree(fff)) then
					return false;
				end if;
			end if;
		end if;
	end if;
	return true;
end function;

isComptAux:=function(fff,f1p,f2p,mpd,Facs)
	// SFs:=[];
	for c in CartesianPower({0,1},#Facs) do
		// print c;
		xi:=&*[Facs[i]^c[i] : i in [1..#Facs]];
		if xi eq 1 then
			continue;
		end if;
		if not isCompt(fff,f1p,f2p,mpd,xi) then
			print "incompatible!", xi;
			// print xi;
			// if isCompt(fff,f1p,f2p,mpd,&*[Facs[i] : i in [1..#Facs]]) then
			// 	print "missing!";
			// end if;
			return false;
		end if;
	end for;
	return true;
end function;


isCompatible:=function(fff,f1p,f2p,mpd,minpoly,Facs)
	AC:=AlgebraicClosure();
	PK<z>:=PolynomialRing(AC);
	P<x>:=PolynomialRing(Rationals());
	ggroots:=Roots(fff,AC);

	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];
	// froots:=[AC!ffroots[i] : i in [1..#ffroots]];
	fg:=f1p*f2p;
	for xi in Facs do
		proots:=Roots(xi,AC);
		m:=MinimalPolynomial(Evaluate(fg,proots[1][1]));

		if Degree(xi) eq 1 then
			continue;
		end if;
		
		if Degree(m) eq #proots then
			if IsIrreducible(Evaluate(m,x^2)) then
				if #GaloisGroup(Evaluate(m,x^2)) gt #GaloisGroup(m) and Degree(fff) mod 2 eq 1 then
				// if d mod SquareFree(Integers()!Resultant(fg,p)) ne 0 then
					q:=minpoly/xi;
					if (Integers()!( Evaluate(q,1) - Evaluate(q,0) ) ) mod 2 eq 1 then
						print "Seidel-incompatible!", xi;
						return false;
					end if;
				end if;
			else
				print "compatible for", xi;
				if #Facs eq 1 then
					if Degree(fff) mod 2 eq 0 then
						print "Seidel-compatible!";
						return true;
					else
						N<al>:=NumberField(m);
						sqm:=MinimalPolynomial(SquareRoot(Evaluate(fg,proots[1][1])));
						q:=minpoly/xi;
						if Integers()!Coefficient(Evaluate(P!Eltseq(Roots(sqm,N)[1][1]),fg) mod xi,Degree(xi)-1) mod 2 eq (Integers()!( Evaluate(q,1) - Evaluate(q,0) ) ) mod 2 then
							print "Seidel-compatible!";
							return true;
						end if;
					end if;
				end if;
			end if;
		end if;
	end for;
	print "inconclusive....";
	return isComptAux(fff,f1p,f2p,mpd,Facs);
end function;



checkLemma56poly:=procedure(pl,pls,crts)
	print pl;
	print pls;
	print crts;
	P<x>:=PolynomialRing(Rationals());
	fff:=P!(Polynomial(Reverse(pl)))*(x+5)^32*(x-9)^10;
	print Factorisation(fff);
	mp:=P!(fff/GCD(fff,Derivative(fff)));
	qp:=P!(fff/mp);
	tic := Cputime();
	llSeidelred:=getInterlacingCharacteristicPolynomials(mp,qp,48);
	toc := Cputime(tic);
	print "Time taken to compute interlacing char polys:", toc,  "seconds";
	print "";
	// print "Interlacing characteristic polynomials:";
	// for i in [1..#llSeidelred] do
	// 	ff:=P!(Polynomial(Reverse(llSeidelred[i])))*qp;
	// 	ms:=P!(ff/GCD(ff,Derivative(ff)));
	// 	print i, Factorisation(ff);
	// end for;
	// print "";
	numrows:=#llSeidelred;
	m:=Matrix(Rationals(),numrows,Degree(mp),[llSeidelred[j] : j in [1..numrows]]);
// # 	mpFacs=factor(mp)
// 	print(0)
	AC:=AlgebraicClosure();
	PK<z>:=PolynomialRing(AC);
	ggroots:=Roots(fff,AC);
// 	if len(ggroots) != mp.degree():
// 		print(ggroots)
// # 		print(gg)
	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];
	// print(1)
	// print froots;
	fbas:=[PK!(PK!(mp)/(z-r)) : r in froots];
	// print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];
	// print(3)
	fbasm:=Matrix(AC,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);
	// print(4)
	bb:=mults*fbasm;
	print "Matrix A corresponding to interlacing polynomials:";
	print m;
	for i in [1..2] do
		// #submatrix of m without f1
		fWarranted:=pls[i];
		fWarrantedInd:=Index(llSeidelred,fWarranted);
		// f1range:=[i for i in range(numrows)]
		// f1range.remove(f1ind)
		fWarrantedRange:=Remove([1..numrows],fWarrantedInd);
		mfWarranted:=Submatrix(m,fWarrantedRange,[1..Degree(mp)]);
		print ""; 
		print "Show that f", i-1, " = ", fWarranted, " is warranted"; 
		// print "Matrix A' corresponding to interlacing polynomials without f", i, ":";
		// print mfWarranted;
		print ""; 
		// #Farkas certificate
		fc:=Vector(Rationals(),crts[i]);
		print "Certificate of warranty c:";
		print "c = ", fc;
		ac:= fc*Transpose(mfWarranted);
		print "Ac >= 0: ", isAtLeastZero(ac);
		print "Ac = ", ac;
		innerprod:= &+[fc[j]*bb[j] : j in [1..Degree(mp)]];
		// ipMp:=MinimalPolynomial(innerprod);
		// // spF:=SplittingField(innerprod);
		// rr:=Roots(ipMp,RealField());
		print "<g,c> < 0: ", Norm(innerprod) lt 0;
		// print #rr;
		// print bb;
		// print fc;
		print "<g,c> = ", innerprod;
	end for;
	// print fbasm;
	f1p:=P!(Polynomial(Reverse(pls[1])));
	f2p:=P!(Polynomial(Reverse(pls[2])));
	mpd:=Derivative(mp);
	af1:=Vector(AC,[Evaluate(f1p,froots[i])/Evaluate(mpd,froots[i]) : i in [1..#froots]]);
	af2:=Vector(AC,[Evaluate(f2p,froots[i])/Evaluate(mpd,froots[i]) : i in [1..#froots]]);
	print "squared angles for f0:";
	print af1;
	print "squared angles for f1:";
	print af2;
	print "--- checking for compatibility of f0 and f1 ---";
	fac:=Factorisation(fff);
	minpoly:=1;
	simpFacs:=[];
	for fc in fac do
		minpoly *:=fc[1];
		if fc[2] eq 1 then
			simpFacs cat:=[fc[1]];
		end if;
	end for;
	// for p in simpFacs do
	// isCompat(fff,f1p,f2p,mpd);
	if not isCompatible(fff,f1p,f2p,mpd,minpoly,simpFacs) then
		print "polys are not compatible"; 
	end if;
	print "";
end procedure;

checkLemma56:=procedure()
 	// inds:=[4,6,15,35,42,58,71,73,89,122,157];
 	// inds:=[4,6,15,42,58,71,73,89,122,157];
	inds:=[
	[ 1, -70, 2079, -34000, 330975, -1919214, 6141825, -8371836 ],
	[ 1, -70, 2079, -33988, 330543, -1913382, 6106833, -8293104 ],
	[ 1, -70, 2079, -33976, 330111, -1907598, 6072705, -8218260 ],
	[ 1, -70, 2079, -33964, 329663, -1901366, 6034401, -8130456 ],
	[ 1, -70, 2079, -33960, 329503, -1899022, 6019425, -8095140 ],
	[ 1, -70, 2079, -33952, 329119, -1892366, 5969601, -7958412 ],
	[ 1, -70, 2079, -33948, 328959, -1889974, 5953761, -7919208 ],
	[ 1, -70, 2079, -33948, 328991, -1890966, 5963969, -7954056 ],
	[ 1, -70, 2079, -33944, 328847, -1889118, 5954289, -7938084 ],
	[ 1, -70, 2079, -33936, 328543, -1884782, 5926657, -7871292 ],
	[ 1, -70, 2079, -33920, 327839, -1873230, 5842881, -7644780 ]
	 ];
	pols:=[[[1,-38,508,-2810,5363],[1,-38,508,-2802,5291]],
          [[1,-38,508,-2802,5339],[1,-38,508,-2794,5267]],
          [[1,-56,1273,-15008,96523,-319816,423835], [1,-56,1273,-15008,96555,-320360,426075]],
          [[1,-56,1273,-15000,96371,-319088,423571], [1,-56,1273,-15000,96371,-319056,423347]],
		  [[1,-56,1273,-14992,96139,-316952,417243], [1,-56,1273,-14992,96155,-317240,418475]],
		  [[1,-45,778,-6434,25317,-37761],[1,-45,778,-6426,25205,-37433]],
		  [[1,-45,778,-6426,25189,-37289],[1,-45,778,-6418,25061,-36817]],
		  [[1,-43,710,-5618,21257,-30675],[1,-43,710,-5610,21145,-30283]],
		  [[1,-52,1097,-12008,71851,-222500,277963], [1,-52,1097,-12000,71603,-220076,270467]],
		  [[1,-54,1183,-13420,82903,-263678,336297], [1,-54,1183,-13412,82687,-261830,331265]],
		  [[1,-45,778,-6402,24837,-36257],[1,-45,778,-6386,24501,-34529]]];
	certs:=[[[-28491688,0,0,-13311,-1663],[-71206868,0,0,-31318,-3131]],
           [[-31466028, 0, 0, -15413, -2201],[-32393128, 0, 0, -14283, -1428]],
           [[3081463054228, 0, 0, 329213615, 23608945, 1311608, 0], [0, 0, 0, 0, -239073, -107333, -26537]],
           [[0, 0, 0, 576862162, 159550736, 25867427, 3614120],[-900198292671, 0, 0, -70576836, 0, 678324, 136910]],
           [[15798865000678, 0, 0, 1810892027, 159441460, 14258992, 1296273],[0, 0, 0, 8229987, 1467053, 0, -42311]],
           [[7723650238, 0, 0, 1795746, 177797, 17779], [1681764478, 0, 0, 411472, 45720, 5079]],
           [[8311896038, 0, 0, 1932968, 192633, 19927],[2513477598, 0, 0, 614905, 68323, 7591]],
		   [[-615702770, 0, 0, -180140, -22209, -2468],[-3736443160, 0, 0, -1027960, -114217, -12691]],
           [[1614272396498, 0, 0, 236406108, 23278501, 2290900, 221701],[693739600051, 0, 0, 103053553, 10456851, 1071550, 110851]],
           [[0, 0, 0, 0, 28753, 11854, 2194], [0, 0, 0, 4052423, 1116206, 173878, 22882]],
           [[-5637966054, 0, 0, -1233304, -103494, -8625],[-27025283304, 0, 0, -5833300, -470427, -37635]]];
	for i in [1..#inds] do
		print "checking polynomial ", inds[i]; 
		checkLemma56poly(inds[i],pols[i],certs[i]);
	end for;
end procedure;


getCompatiblePolynomials:=function(intPolys,f1,fff,mp)
	P<x>:=PolynomialRing(Rationals());
	// AC:=ac;
	// PK<z>:=PolynomialRing(AC);
	// intPolys:=getInterlacingCharacteristicPolynomials(mp,qp);
	compats:=[];
	mpd:=Derivative(mp);
	f1p:=P!(Polynomial(Reverse(f1)));
	fac:=Factorisation(fff);
	minpoly:=1;
	simpFacs:=[];
	for fc in fac do
		minpoly *:=fc[1];
		if fc[2] eq 1 then
			simpFacs cat:=[fc[1]];
		end if;
	end for;
	// af1:=Vector(AC,[Evaluate(f1p,froots[i])/Evaluate(mpd,froots[i]) : i in [1..#froots]]);
	for i in [1..#intPolys] do
		print i, "/", #intPolys;
		p:=intPolys[i];
		f2p:=P!(Polynomial(Reverse(p)));
		if isCompatible(fff,f1p,f2p,mpd,minpoly,simpFacs) then
			print "is compatible!";
			compats cat:=[p];
		end if;
	end for;
	return compats;
end function;

checkPairwaiseCompatibility:=function(compatibleSet,fff,mp)
	P<x>:=PolynomialRing(Rationals());
	compats:=[];
	mpd:=Derivative(mp);
	fac:=Factorisation(fff);
	minpoly:=1;
	simpFacs:=[];
	for fc in fac do
		minpoly *:=fc[1];
		if fc[2] eq 1 then
			simpFacs cat:=[fc[1]];
		end if;
	end for;
	for sb in Subsets({1..#compatibleSet},2) do
		osb:=[i : i in sb];
		f1p:=P!(Polynomial(Reverse(compatibleSet[osb[1]])));
		f2p:=P!(Polynomial(Reverse(compatibleSet[osb[2]])));
		print "checking", osb[1], osb[2];
		if isCompatible(fff,f1p,f2p,mpd,minpoly,simpFacs) then
			print "is compatible!";
		else
			print "not compatible!";
			return false;
		end if;
	end for;
	return true;
end function;

checkLemma57poly:=procedure(pl,pls,crts)
	print pl;
	print pls;
	print crts;
	P<x>:=PolynomialRing(Rationals());
	fff:=P!(Polynomial(Reverse(pl)))*(x+5)^32*(x-9)^10;
	print Factorisation(fff);
	mp:=P!(fff/GCD(fff,Derivative(fff)));
	qp:=P!(fff/mp);
	print Factorisation(qp);
	tic := Cputime();
	llSeidelred:=getInterlacingCharacteristicPolynomials(mp,qp,48);
	toc := Cputime(tic);
	print "Time taken to compute interlacing char polys:", toc,  "seconds";
	print "";

	numrows:=#llSeidelred;
	m:=Matrix(Rationals(),numrows,Degree(mp),[llSeidelred[j] : j in [1..numrows]]);

	AC:=AlgebraicClosure();
	PK<z>:=PolynomialRing(AC);
	ggroots:=Roots(fff,AC);

	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];

	// print froots;
	fbas:=[PK!(PK!(mp)/(z-r)) : r in froots];
	// print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];

	fbasm:=Matrix(AC,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);

	bb:=mults*fbasm;
	print "Matrix A corresponding to interlacing polynomials:";
	print m;
	// #submatrix of m without f1
	fWarranted:=pls;
	fWarrantedInd:=Index(llSeidelred,fWarranted);

	fWarrantedRange:=Remove([1..numrows],fWarrantedInd);
	mfWarranted:=Submatrix(m,fWarrantedRange,[1..Degree(mp)]);
	print ""; 
	print "Show that f = ", fWarranted, " is warranted"; 
	// print "Matrix A' corresponding to interlacing polynomials without f:";
	// print mfWarranted;
	print ""; 
	// #Farkas certificate
	fc:=Vector(Rationals(),crts[1]);
	print "Certificate of warranty c:";
	print "c = ", fc;
	ac:= fc*Transpose(mfWarranted);
	print "Ac >= 0: ", isAtLeastZero(ac);
	print "Ac = ", ac;
	innerprod:= &+[fc[j]*bb[j] : j in [1..Degree(mp)]];

	print "<g,c> < 0: ", Norm(innerprod) lt 0;

	print "<g,c> = ", innerprod;

	print "--- get polys compatible with f ---";
	compatPolys:=getCompatiblePolynomials(llSeidelred,pls,fff,mp);
	for pp in compatPolys do
		ppp:=P!(Polynomial(Reverse(pp)))*qp;
		print Factorisation(ppp);
	end for;
	// print compatPolys;
	numrows:=#compatPolys;
	m:=Matrix(Rationals(),numrows,Degree(mp),[compatPolys[j] : j in [1..numrows]]);
	fc:=Vector(Rationals(),crts[2]);
	print "Certificate of infeasibility c:";
	print "c = ", fc;
	ac:= fc*Transpose(m);
	print "Ac >= 0: ", isAtLeastZero(ac);
	print "Ac = ", ac;
	innerprod:= &+[fc[j]*bb[j] : j in [1..Degree(mp)]];

	print "<g,c> < 0: ", Norm(innerprod) lt 0;

	print "<g,c> = ", innerprod;
	print "";
end procedure;

checkLemma57:=procedure()

	inds:=[
	[ 1, -70, 2079, -33968, 329791, -1902862, 6041889, -8143740 ],
	[ 1, -70, 2079, -33968, 329791, -1902830, 6041313, -8141148 ],
	[ 1, -70, 2079, -33964, 329631, -1900534, 6027329, -8110872 ],
	[ 1, -70, 2079, -33956, 329327, -1896134, 5998545, -8039088 ],
	[ 1, -70, 2079, -33952, 329151, -1893294, 5978529, -7986924 ],
	[ 1, -70, 2079, -33932, 328351, -1881398, 5900609, -7797240 ],
	[ 1, -70, 2079, -33916, 327679, -1870902, 5828449, -7613320 ],
	[ 1, -70, 2079, -33900, 326975, -1859286, 5743265, -7379064 ]
	 ];
	pols:=[[ 1, -56, 1273, -15000, 96339, -318576, 421619 ],
          [ 1, -56, 1273, -15000, 96339, -318544, 421459 ],
          [ 1, -47, 854, -7466, 31161, -49015 ],
          [ 1, -56, 1273, -14992, 96155, -317304, 419371 ],
		  [ 1, -47, 850, -7342, 30061, -46531 ],
		  [ 1, -54, 1183, -13412, 82687, -261926, 332321 ],
		  [ 1, -41, 646, -4870, 17497, -23889 ],
		  [ 1, -32, 358, -1632, 2553 ]];
	certs:=[[[0, 0, 0, 1746419, 491392, 81630, 11528],[-733717562599, 0, 0, -88445449, -8599751, -854743, -87218]],
           [[0, 0, 0, 2578890, 690376, 105095, 13403],[1986879326641, 0, 0, 183663110, 8328599, 0, -81386]],
           [[49638392174, 0, 0, 10008058, 946709, 90162], [0, 0, 0, 58308, 28387, 9164]],
           [[0, 0, 0, 3772987, 1029536, 162478, 21753],[877829032285, 0, 0, 0, -19643059, -4005362, -619899]],
           [[-30845693350, 0, 0, -6031794, -513344, -42779],[0, 0, 0, 17473, 5644, 889]],
           [[0, 0, 0, 15489527, 4414523, 731381, 103163], [0, 0, 0, 0, 39830, 17496, 3881]],
           [[-4146865216, 0, 0, -1459666, -205965, -26866],[0, 0, 0, -312193, -119497, -23881]],
		   [[13345166, 0, 0, 9135, 610],[-11430609, 0, 0, -7006, 0]]];
	for i in [1..#inds] do
		print "checking polynomial ", inds[i]; 
		checkLemma57poly(inds[i],pols[i],certs[i]);
	end for;
end procedure;

// Section 1.5

isAtLeastZeroInt:=function(l)
	d:=Dimension(Parent(l));
	for i in [1..d] do
		if l[i] lt 0 then
			return false;
		end if;

	end for;
	for i in [1..d] do

		if Denominator(l[i]) gt 1 then
			return false;
		end if;
	end for;
	return true;
end function;

findSols:=function(ps,knl,d)
	sols:=[];
	B:=Basis(knl);

	for c in CartesianProduct([{0..49} : i in [1..#B]]) do
		v:=ps;
		for i in [1..#B] do
			v+:= (c[i]-v[i])*B[i];
		end for;

		if isAtLeastZeroInt(ChangeRing(v,Rationals())) then
			print c;
			sols cat:= [v];
		end if;
	end for;
	return sols;
end function;


printInterlacingConfigs:=function(poly,warr,cert)
	P<x>:=PolynomialRing(Rationals());
	fff:=poly;
	print Factorisation(fff);
	mp:=P!(fff/GCD(fff,Derivative(fff)));
	qp:=P!(fff/mp);
	n:=Degree(fff);
	tic := Cputime();
	if n mod 2 eq 0 then
		llSeidelred:=getInterlacingCharacteristicPolynomials2(mp,qp,n-1,7);
	else
		llSeidelred:=getInterlacingCharacteristicPolynomials(mp,qp,n-1);
	end if;
	toc := Cputime(tic);
	print "Time taken to compute interlacing char polys:", toc,  "seconds";
	print "";
	numrows:=#llSeidelred;
	m:=Matrix(Rationals(),numrows,Degree(mp),[llSeidelred[j] : j in [1..numrows]]);

	print "number of interlacing polynomials:", numrows;
	AC:=AlgebraicClosure();
	PK<z>:=PolynomialRing(AC);
	ggroots:=Roots(fff,AC);

	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];

	print froots;
	fbas:=[PK!(PK!(mp)/(z-r)) : r in froots];
	print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];

	fbasm:=Matrix(AC,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);

	bb:=mults*fbasm;
	print "Matrix A corresponding to interlacing polynomials:";
	print m;
	// #submatrix of m without f1
	fWarranted:=warr;
	fWarrantedInd:=Index(llSeidelred,fWarranted);
	fWarrantedRange:=Remove([1..numrows],fWarrantedInd);
	
	mfWarranted:=Submatrix(m,fWarrantedRange,[1..Degree(mp)]);
	print ""; 
	print "Show that f = ", fWarranted, " is warranted"; 
	print "Matrix A' corresponding to interlacing polynomials without f:"; 
	print mfWarranted;
	print ""; 
	// #Farkas certificate
	fc:=Vector(Rationals(),cert);
	print "Certificate of warranty c:";
	print "c = ", fc;
	ac:= fc*Transpose(mfWarranted);
	print "Ac >= 0: ", isAtLeastZero(ac);
	print "Ac = ", ac;
	innerprod:= &+[fc[j]*bb[j] : j in [1..Degree(mp)]];

	print "<g,c> < 0: ", Norm(innerprod) lt 0;

	print "<g,c> = ", innerprod;

	print "--- get polys compatible with f ---";
	compatPolys:=getCompatiblePolynomials(llSeidelred,fWarranted,fff,mp);

	print compatPolys;
	if checkPairwaiseCompatibility(compatPolys,fff,mp) then
		print "pairwise compatibility: check";
	else
		print "failed pairwise compatibility";
	end if;
	numrows:=#compatPolys;
	m:=Matrix(AC,numrows,Degree(mp),[compatPolys[j] : j in [1..numrows]]);
	print bb;
	pr,sp:=Solution(m,bb);
	print pr;
	print sp;
	print "--- list interlacing configurations ---";
	if Dimension(sp) eq 0 then
		print pr;
		sls:=[];
	else
		sls:=findSols(pr,sp,Degree(mp));
		print " there are", #sls, "interlacing configurations";
		print sls;
	end if;
	return qp, compatPolys, sls;
end function;

checkLemma58:=procedure()
	P<x>:=PolynomialRing(Rationals());
	fff:=(x+5)^32*(x-9)^13*(x-11)^2*(x^2-21*x+92);
	print Factorisation(fff);
	mp:=P!(fff/GCD(fff,Derivative(fff)));
	qp:=P!(fff/mp);
	tic := Cputime();
	llSeidelred:=getInterlacingCharacteristicPolynomials(mp,qp,48);
	toc := Cputime(tic);
	print "Time taken to compute interlacing char polys:", toc,  "seconds";
	print "";
	numrows:=#llSeidelred;
	m:=Matrix(Rationals(),numrows,Degree(mp),[llSeidelred[j] : j in [1..numrows]]);

	print "number of interlacing polynomials:", numrows;
	AC:=AlgebraicClosure();
	PK<z>:=PolynomialRing(AC);
	ggroots:=Roots(fff,AC);

	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];

	print froots;
	fbas:=[PK!(PK!(mp)/(z-r)) : r in froots];
	print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];

	fbasm:=Matrix(AC,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);

	bb:=mults*fbasm;
	print "Matrix A corresponding to interlacing polynomials:";
	print m;
	// #submatrix of m without f1
	fWarranted1:=[ 1, -36, 454, -2356, 4241 ];
	fWarrantedInd1:=Index(llSeidelred,fWarranted1);
	llSeidelred1:=Remove(llSeidelred,fWarrantedInd1);
	fWarrantedRange1:=Remove([1..numrows],fWarrantedInd1);
	
	fWarranted2:=[ 1, -36, 454, -2348, 4169 ];
	fWarrantedInd2:=Index(llSeidelred1,fWarranted2);
	print #llSeidelred, Index(llSeidelred,fWarranted2);
	
	fWarrantedRange:=Remove(fWarrantedRange1,fWarrantedInd2);
	mfWarranted:=Submatrix(m,fWarrantedRange,[1..Degree(mp)]);
	print ""; 
	print "Show that f1= ", fWarranted1, " and f2 = ", fWarranted2, " are a warranted pair"; 
	print "Matrix A' corresponding to interlacing polynomials without f1 and f2:"; 
	print mfWarranted;
	print ""; 
	// #Farkas certificate
	fc:=Vector(Rationals(),[-17507602, 0, 0, -9281, -1031]);
	print "Certificate of warranty c:";
	print "c = ", fc;
	ac:= fc*Transpose(mfWarranted);
	print "Ac >= 0: ", isAtLeastZero(ac);
	print "Ac = ", ac;
	innerprod:= &+[fc[j]*bb[j] : j in [1..Degree(mp)]];

	print "<g,c> < 0: ", Norm(innerprod) lt 0;

	print "<g,c> = ", innerprod;

	print "--- get polys compatible with f1 ---";
	compatPolys1:=getCompatiblePolynomials(llSeidelred,fWarranted1,fff,mp);
	// print compatPolys1;
	print "--- get polys compatible with f2 ---";
	compatPolys2:=getCompatiblePolynomials(llSeidelred,fWarranted2,fff,mp);
	compatPolys:=compatPolys1;
	for p in compatPolys2 do
		if not p in compatPolys then
			compatPolys cat:= [p];
		end if;
	end for;
	print compatPolys;
	if checkPairwaiseCompatibility(compatPolys,fff,mp) then
		print "pairwise compatibility: check";
	else
		print "failed pairwise compatibility";
	end if;
	numrows:=#compatPolys;
	m:=Matrix(AC,numrows,Degree(mp),[compatPolys[j] : j in [1..numrows]]);
	print bb;
	pr,sp:=Solution(m,bb);
	print pr;
	print sp;
	print "--- list interlacing configurations ---";
	print findSols(pr,sp,Degree(mp));
	
	// calculate angles
	N<sqrt73>:=NumberField(x^2-73);
	PN<zz>:=PolynomialRing(N);
	ggroots:=Roots(fff,N);

	mults:=Vector(N,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];

	print froots;
	fbas:=[PN!(PN!(mp)/(zz-r)) : r in froots];
	print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];

	fbasm:=Matrix(N,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);
	mpd:=Derivative(mp);
	comptPolys:=[P!Polynomial(Reverse(f)) : f in compatPolys];
	afs:=[Vector(N,[Evaluate(f,froots[i])/Evaluate(mpd,froots[i]) : i in [1..#froots]]) : f in comptPolys];
	print afs;
	
	a1:=Roots(Polynomial([-afs[2][4]*afs[3][4],0,1]),N)[1][1];
	a2:=Roots(Polynomial([-afs[2][5]*afs[3][5],0,1]),N)[1][1];
	q:=(zz+5)*(zz-9);
	print Evaluate(q,froots[4])*a1+Evaluate(q,froots[5])*a2;
	print Evaluate(q,froots[4])*a1-Evaluate(q,froots[5])*a2;
end procedure;

checkLemma63:=procedure()
	P<x>:=PolynomialRing(Rationals());
	qp1, compat1, sls:=printInterlacingConfigs((x+5)^32*(x-7)*(x-9)^14*(x-12)*(x-15),[1,-38,508,-2794,5299],[-60980320, 0, 0, -26357, -2396]);
end procedure;

checkLemma64:=procedure()
	P<x>:=PolynomialRing(Rationals());
	fff:=(x+5)^32*(x-7)*(x-8)*(x-9)^12*(x-11)^2*(x-15);
	print Factorisation(fff);
	mp:=P!(fff/GCD(fff,Derivative(fff)));
	qp:=P!(fff/mp);
	tic := Cputime();
	llSeidelred:=getInterlacingCharacteristicPolynomials(mp,qp,48);
	toc := Cputime(tic);
	print "Time taken to compute interlacing char polys:", toc,  "seconds";
	print "";
	numrows:=#llSeidelred;
	m:=Matrix(Rationals(),numrows,Degree(mp),[llSeidelred[j] : j in [1..numrows]]);

	print "number of interlacing polynomials:", numrows;
	AC:=AlgebraicClosure();
	PK<z>:=PolynomialRing(AC);
	ggroots:=Roots(fff,AC);

	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];

	print froots;
	fbas:=[PK!(PK!(mp)/(z-r)) : r in froots];
	print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];

	fbasm:=Matrix(AC,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);

	bb:=mults*fbasm;
	print "Matrix A corresponding to interlacing polynomials:";
	print m;
	// #submatrix of m without f1
	fWarranted1:=[ 1, -45, 778, -6458, 25701, -39081 ];
	fWarrantedInd1:=Index(llSeidelred,fWarranted1);
	llSeidelred1:=Remove(llSeidelred,fWarrantedInd1);
	fWarrantedRange1:=Remove([1..numrows],fWarrantedInd1);
	
	fWarranted2:=[ 1, -45, 778, -6442, 25397, -37673 ];
	fWarrantedInd2:=Index(llSeidelred1,fWarranted2);
	print #llSeidelred, Index(llSeidelred,fWarranted2);
	
	fWarrantedRange:=Remove(fWarrantedRange1,fWarrantedInd2);
	mfWarranted:=Submatrix(m,fWarrantedRange,[1..Degree(mp)]);
	print ""; 
	print "Show that f1= ", fWarranted1, " and f2 = ", fWarranted2, " are a warranted pair"; 
	print "Matrix A' corresponding to interlacing polynomials without f1 and f2:"; 
	print mfWarranted;
	print ""; 
	// #Farkas certificate
	fc:=Vector(Rationals(),[-114666126726, 0, 0, -29336361, -3575825, -437857]);
	print "Certificate of warranty c:";
	print "c = ", fc;
	ac:= fc*Transpose(mfWarranted);
	print "Ac >= 0: ", isAtLeastZero(ac);
	print "Ac = ", ac;
	innerprod:= &+[fc[j]*bb[j] : j in [1..Degree(mp)]];

	print "<g,c> < 0: ", Norm(innerprod) lt 0;

	print "<g,c> = ", innerprod;

	print "--- get polys compatible with f1 ---";
	compatPolys1:=getCompatiblePolynomials(llSeidelred,fWarranted1,fff,mp);

	print "--- get polys compatible with f2 ---";
	compatPolys2:=getCompatiblePolynomials(llSeidelred,fWarranted2,fff,mp);
	compatPolys:=compatPolys1;
	for p in compatPolys2 do
		if not p in compatPolys then
			compatPolys cat:= [p];
		end if;
	end for;
	print compatPolys;
	numrows:=#compatPolys;
	m:=Matrix(AC,numrows,Degree(mp),[compatPolys[j] : j in [1..numrows]]);
	print bb;
	pr,sp:=Solution(m,bb);
	print pr;
	print sp;
	print "--- list interlacing configurations ---";
	print findSols(pr,sp,Degree(mp));
end procedure;


checkLemma65:=procedure()
	P<x>:=PolynomialRing(Rationals());
	qp1, compat1, sls:=printInterlacingConfigs((x+5)^32*(x-7)^2*(x-8)*(x-9)^10*(x-11)^2*(x-13)^2,[ 1, -43, 718, -5802, 22609, -33803 ],[-1368582672, 0, 0, -369129, -41014, -4558]);
	print " there are", #sls, "interlacing configurations";
	for c in sls do
		if c[2]+c[4]+c[6]+c[7]+c[8] ne 33 then
			print "exception!";
		end if;
	end for;
end procedure;

checkLemma71:=procedure()
	P<x>:=PolynomialRing(Rationals());
	qp1, compat1, sls1:=printInterlacingConfigs((x+5)^32*(x-4)*(x-9)^10*(x-11)^6,[ 1, -19, 107, -185 ],[11984, 0, 0, 67]);
	qp2, compat2, sls2:=printInterlacingConfigs((x+5)^31*(x-5)*(x-9)^9*(x-11)^5*(x^2-14*x+37),[ 1, -34, 438, -2652, 7513, -7906 ],[-632673042, 0, 0, -330026, -37186, -4649]);
	comptPolys1:=[P!Polynomial(Reverse(f)) : f in compat1];
	comptPolys2:=[P!Polynomial(Reverse(f)) : f in compat2];
	print Factorisation(qp1*comptPolys1[1]);
	print Factorisation(qp1*comptPolys1[2]);
	for i in [1..#comptPolys2] do
		print Factorisation(qp2*comptPolys2[i]);
		if interlace(qp1*comptPolys1[1],qp2*comptPolys2[i]) and interlace(qp1*comptPolys1[2],qp2*comptPolys2[i]) then
			print i;
		end if;
	end for;
end procedure;

checkLemma74:=procedure()
	P<x>:=PolynomialRing(Rationals());
	fff:=(x+5)^32*(x-7)*(x-9)^10*(x-11)^4*(x^2-19*x+76);
	qp1, compat1, sls:=printInterlacingConfigs((x+5)^32*(x-7)*(x-9)^10*(x-11)^4*(x^2-19*x+76),[ 1, -41, 646, -4886, 17753, -24801 ],[0, 0, 0, -31002, -10684, -1527]);
	N<sqrt57>:=NumberField(x^2-57);
	PN<zz>:=PolynomialRing(N);
	ggroots:=Roots(fff,N);

	mults:=Vector(N,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];
	// print(1)
	print froots;
	mp:=P!(fff/GCD(fff,Derivative(fff)));
	fbas:=[PN!(PN!(mp)/(zz-r)) : r in froots];
	print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];
	// print(3)
	fbasm:=Matrix(N,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);
	mpd:=Derivative(mp);
	comptPolys:=[P!Polynomial(Reverse(f)) : f in compat1];
	afs:=[Vector(N,[Evaluate(f,froots[i])/Evaluate(mpd,froots[i]) : i in [1..#froots]]) : f in comptPolys];
	print afs;
	K<b1>:=NumberField([Polynomial([-x,0,1]):x in [afs[1][6]*afs[1][5]]]:Abs);
	b2:=SquareRoot(K!(afs[2][6]*afs[2][5]));
	b3:=SquareRoot(K!(afs[3][6]*afs[3][5]));
	b4:=SquareRoot(K!(afs[4][6]*afs[4][5]));
	b5:=SquareRoot(K!(afs[5][6]*afs[5][5]));
	bs:=[b1,-b2,-b3,-b4,-b5];
	es:=[1,-1,-1,1,1];
	for sl in sls do
		if &+[K!sl[i]*es[i]*bs[i] : i in [1..5]] eq 0 then
			print sl;		
		end if;
	end for;
end procedure;



checkLemma82:=procedure()
	P<x>:=PolynomialRing(Rationals());
	fff:=(x+5)^32*(x-9)^12*(x-11)^3*(x^2-19*x+72);
	print Factorisation(fff);
	mp:=P!(fff/GCD(fff,Derivative(fff)));
	qp:=P!(fff/mp);
	tic := Cputime();
	llSeidelred:=getInterlacingCharacteristicPolynomials(mp,qp,48);
	toc := Cputime(tic);
	print "Time taken to compute interlacing char polys:", toc,  "seconds";
	print "";
	numrows:=#llSeidelred;
	m:=Matrix(Rationals(),numrows,Degree(mp),[llSeidelred[j] : j in [1..numrows]]);

	print "number of interlacing polynomials:", numrows;
	AC:=AlgebraicClosure();
	PK<z>:=PolynomialRing(AC);
	ggroots:=Roots(fff,AC);

	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];

	print froots;
	fbas:=[PK!(PK!(mp)/(z-r)) : r in froots];
	print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];

	fbasm:=Matrix(AC,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);

	bb:=mults*fbasm;
	print "Matrix A corresponding to interlacing polynomials:";
	print m;
	// #submatrix of m without f1
	fWarranted1:=[ 1, -34, 404, -1966, 3323 ];
	fWarrantedInd1:=Index(llSeidelred,fWarranted1);
	llSeidelred1:=Remove(llSeidelred,fWarrantedInd1);
	fWarrantedRange1:=Remove([1..numrows],fWarrantedInd1);
	
	fWarranted2:=[ 1, -34, 404, -1966, 3339 ];
	fWarrantedInd2:=Index(llSeidelred1,fWarranted2);
	print #llSeidelred, Index(llSeidelred,fWarranted2);
	
	fWarrantedRange:=Remove(fWarrantedRange1,fWarrantedInd2);
	mfWarranted:=Submatrix(m,fWarrantedRange,[1..Degree(mp)]);
	print ""; 
	print "Show that f = ", fWarranted1, " and ", fWarranted2, " are warranted"; 
	print "Matrix A' corresponding to interlacing polynomials without f:"; 
	print mfWarranted;
	print ""; 
	// #Farkas certificate
	fc:=Vector(Rationals(),[-37937620, 0, 0, -29081, -5816]);
	print "Certificate of warranty c:";
	print "c = ", fc;
	ac:= fc*Transpose(mfWarranted);
	print "Ac >= 0: ", isAtLeastZero(ac);
	print "Ac = ", ac;
	innerprod:= &+[fc[j]*bb[j] : j in [1..Degree(mp)]];

	print "<g,c> < 0: ", Norm(innerprod) lt 0;

	print "<g,c> = ", innerprod;

	print "--- get polys compatible with f3 ---";
	compatPolys1:=getCompatiblePolynomials(llSeidelred,fWarranted1,fff,mp);

	print compatPolys1;
	if checkPairwaiseCompatibility(compatPolys1,fff,mp) then
		print "pairwise compatibility: check";
	else
		print "failed pairwise compatibility";
	end if;
	numrows:=#compatPolys1;
	m:=Matrix(AC,numrows,Degree(mp),[compatPolys1[j] : j in [1..numrows]]);
	print bb;
	pr,sp:=Solution(m,bb);
	print pr;
	print sp;
	
	print "--- get polys compatible with f4 ---";
	compatPolys2:=getCompatiblePolynomials(llSeidelred,fWarranted2,fff,mp);

	print compatPolys2;
	if checkPairwaiseCompatibility(compatPolys2,fff,mp) then
		print "pairwise compatibility: check";
	else
		print "failed pairwise compatibility";
	end if;
	numrows:=#compatPolys2;
	m:=Matrix(AC,numrows,Degree(mp),[compatPolys2[j] : j in [1..numrows]]);
	print bb;
	pr,sp:=Solution(m,bb);
	print pr;
	print sp;
	print "--- list interlacing configurations ---";
	sls:=findSols(pr,sp,Degree(mp));
	print " there are", #sls, "interlacing configurations";
	print sls;
	// calculate angles
	N<sqrt73>:=NumberField(x^2-73);
	PN<zz>:=PolynomialRing(N);
	ggroots:=Roots(fff,N);
// 	if len(ggroots) != mp.degree():
// 		print(ggroots)
// # 		print(gg)
	mults:=Vector(N,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];
	// print(1)
	print froots;
	fbas:=[PN!(PN!(mp)/(zz-r)) : r in froots];
	print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];
	// print(3)
	fbasm:=Matrix(N,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);
	mpd:=Derivative(mp);
	comptPolys:=[P!Polynomial(Reverse(f)) : f in compatPolys2];
	afs:=[Vector(N,[N!(Evaluate(f,froots[i])/Evaluate(mpd,froots[i])) : i in [1..#ggroots]]) : f in comptPolys];
	print afs;
	
	if RealEmbeddings(SquareRoot((afs[1][4]*afs[2][4])))[1] gt 0 then
		a12a:=SquareRoot((afs[1][4]*afs[2][4]));
	else
		a12a:=-SquareRoot((afs[1][4]*afs[2][4]));
	end if;
	if RealEmbeddings(SquareRoot(afs[1][5]*afs[2][5]))[1] gt 0 then
		a12b:=SquareRoot(afs[1][5]*afs[2][5]);
	else
		a12b:=-SquareRoot(afs[1][5]*afs[2][5]);
	end if;
	if RealEmbeddings(SquareRoot(afs[1][4]*afs[3][4]))[1] gt 0 then
		a13a:=SquareRoot(afs[1][4]*afs[3][4]);
	else
		a13a:=-SquareRoot(afs[1][4]*afs[3][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[1][5]*afs[3][5]))[1] gt 0 then
		a13b:=SquareRoot(afs[1][5]*afs[3][5]);
	else
		a13b:=-SquareRoot(afs[1][5]*afs[3][5]);
	end if;
	
	if RealEmbeddings(SquareRoot(afs[1][4]*afs[4][4]))[1] gt 0 then
		a14a:=SquareRoot(afs[1][4]*afs[4][4]);
	else
		a14a:=-SquareRoot(afs[1][4]*afs[4][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[1][5]*afs[4][5]))[1] gt 0 then
		a14b:=SquareRoot(afs[1][5]*afs[4][5]);
	else
		a14b:=-SquareRoot(afs[1][5]*afs[4][5]);
	end if;
	if RealEmbeddings(SquareRoot(afs[2][4]*afs[3][4]))[1] gt 0 then
		a23a:=SquareRoot(afs[2][4]*afs[3][4]);
	else
		a23a:=-SquareRoot(afs[2][4]*afs[3][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[2][5]*afs[3][5]))[1] gt 0 then
		a23b:=SquareRoot(afs[2][5]*afs[3][5]);
	else
		a23b:=-SquareRoot(afs[2][5]*afs[3][5]);
	end if;
	
	if RealEmbeddings(SquareRoot(afs[2][4]*afs[4][4]))[1] gt 0 then
		a24a:=SquareRoot(afs[2][4]*afs[4][4]);
	else
		a24a:=-SquareRoot(afs[2][4]*afs[4][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[2][5]*afs[4][5]))[1] gt 0 then
		a24b:=SquareRoot(afs[2][5]*afs[4][5]);
	else
		a24b:=-SquareRoot(afs[2][5]*afs[4][5]);
	end if;
	if RealEmbeddings(SquareRoot(afs[3][4]*afs[4][4]))[1] gt 0 then
		a34a:=SquareRoot(afs[3][4]*afs[4][4]);
	else
		a34a:=-SquareRoot(afs[3][4]*afs[4][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[3][5]*afs[4][5]))[1] gt 0 then
		a34b:=SquareRoot(afs[3][5]*afs[4][5]);
	else
		a34b:=-SquareRoot(afs[3][5]*afs[4][5]);
	end if;

	q:=(zz+5)*(zz-9)*(zz-11);
	
	K<b1>:=NumberField([Polynomial([-x,0,1]):x in [afs[1][4]*afs[1][5]]]:Abs);
	// b1:=SquareRoot(afs[1][4]*afs[1][5]);
	b2:=SquareRoot(K!(afs[2][4]*afs[2][5]));
	b3:=SquareRoot(K!(afs[3][4]*afs[3][5]));
	b4:=SquareRoot(K!(afs[4][4]*afs[4][5]));
	bs:=[b1,-b2,-b3,-b4];
	// es:=[1,1,1,1];
	for sl in sls do
		for e3 in CartesianPower({-1,1},3) do
		// print &+[K!sl[i]*es[i]*bs[i] : i in [1..6]];
		es:=[1] cat [e3[i] : i in [1..3]];
		if &+[K!sl[i]*es[i]*bs[i] : i in [1..4]] eq 0 then
			print sl;
			print es;
			matarru:=[[afs[1][4], -a12a, -a13a, -a14a],
					 [-a12a, afs[2][4], a23a, a24a],
					 [-a13a, a23a, afs[3][4], a34a],
					 [-a14a, a24a, a34a, afs[4][4]]
					 ];
					 uu:=Matrix(N,matarru);
 			matarrv:=[
					[afs[1][5], a12b, -a13b, a14b],
 					 [a12b, afs[2][5], -a23b, a24b],
 					[-a13b, -a23b, afs[3][5], -a34b],
 					 [a14b, a24b, -a34b, afs[4][5]]
 					 ];
 					 vv:=Matrix(N,matarrv);
			 print 3*(157-sqrt73)*uu/2+3*(157+sqrt73)*vv/2;
			
		end if;
	end for;
	end for;
	
end procedure;

checkLemma83:=procedure()
	P<x>:=PolynomialRing(Rationals());
	fff:=(x+5)^32*(x-9)^13*(x-13)^2*(x^2-17*x+64);
	print Factorisation(fff);
	mp:=P!(fff/GCD(fff,Derivative(fff)));
	qp:=P!(fff/mp);
	tic := Cputime();
	llSeidelred:=getInterlacingCharacteristicPolynomials(mp,qp,48);
	toc := Cputime(tic);
	print "Time taken to compute interlacing char polys:", toc,  "seconds";
	print "";
	numrows:=#llSeidelred;
	m:=Matrix(Rationals(),numrows,Degree(mp),[llSeidelred[j] : j in [1..numrows]]);
	
	print "number of interlacing polynomials:", numrows;
	AC:=AlgebraicClosure();
	PK<z>:=PolynomialRing(AC);
	ggroots:=Roots(fff,AC);

	mults:=Vector(AC,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];
	// print(1)
	print froots;
	fbas:=[PK!(PK!(mp)/(z-r)) : r in froots];
	print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];
	// print(3)
	fbasm:=Matrix(AC,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);
	// print(4)
	bb:=mults*fbasm;
	print "Matrix A corresponding to interlacing polynomials:";
	print m;
	// #submatrix of m without f1
	fWarranted:=[ 1, -34, 408, -2022, 3503 ];
	fWarrantedInd:=Index(llSeidelred,fWarranted);
	fWarrantedRange:=Remove([1..numrows],fWarrantedInd);
	
	mfWarranted:=Submatrix(m,fWarrantedRange,[1..Degree(mp)]);
	print ""; 
	print "Show that f = ", fWarranted, " is warranted"; 
	print "Matrix A' corresponding to interlacing polynomials without f:"; 
	print mfWarranted;
	print ""; 
	// #Farkas certificate
	fc:=Vector(Rationals(),[-12716952, 0, 0, -7781, -864]);
	print "Certificate of warranty c:";
	print "c = ", fc;
	ac:= fc*Transpose(mfWarranted);
	print "Ac >= 0: ", isAtLeastZero(ac);
	print "Ac = ", ac;
	innerprod:= &+[fc[j]*bb[j] : j in [1..Degree(mp)]];

	print "<g,c> < 0: ", Norm(innerprod) lt 0;

	print "<g,c> = ", innerprod;

	print "--- get polys compatible with f ---";
	compatPolys:=getCompatiblePolynomials(llSeidelred,fWarranted,fff,mp);

	print compatPolys;
	if checkPairwaiseCompatibility(compatPolys,fff,mp) then
		print "pairwise compatibility: check";
	else
		print "failed pairwise compatibility";
	end if;
	numrows:=#compatPolys;
	m:=Matrix(AC,numrows,Degree(mp),[compatPolys[j] : j in [1..numrows]]);
	print bb;
	pr,sp:=Solution(m,bb);
	print pr;
	print sp;
	print "--- list interlacing configurations ---";
	sls:=findSols(pr,sp,Degree(mp));
	print " there are", #sls, "interlacing configurations";
	print sls;
	// calculate angles
	N<sqrt33>:=NumberField(x^2-33);
	PN<zz>:=PolynomialRing(N);
	ggroots:=Roots(fff,N);

	mults:=Vector(N,[ggroots[i][2] : i in [1..#ggroots]]);
	froots:=[ggroots[i][1] : i in [1..#ggroots]];

	print froots;
	fbas:=[PN!(PN!(mp)/(zz-r)) : r in froots];
	print fbas;
	fbaslist:=[Reverse(Coefficients(l)) : l in fbas];

	fbasm:=Matrix(N,Degree(mp),Degree(mp),[fbaslist[j] : j in [1..Degree(mp)]]);
	mpd:=Derivative(mp);
	comptPolys:=[P!Polynomial(Reverse(f)) : f in compatPolys];
	afs:=[Vector(N,[Evaluate(f,froots[i])/Evaluate(mpd,froots[i]) : i in [1..#froots]]) : f in comptPolys];
	print afs;
	
	if RealEmbeddings(SquareRoot((afs[1][4]*afs[2][4])))[1] gt 0 then
		a12a:=SquareRoot((afs[1][4]*afs[2][4]));
	else
		a12a:=-SquareRoot((afs[1][4]*afs[2][4]));
	end if;
	if RealEmbeddings(SquareRoot(afs[1][5]*afs[2][5]))[1] gt 0 then
		a12b:=SquareRoot(afs[1][5]*afs[2][5]);
	else
		a12b:=-SquareRoot(afs[1][5]*afs[2][5]);
	end if;
	if RealEmbeddings(SquareRoot(afs[1][4]*afs[3][4]))[1] gt 0 then
		a13a:=SquareRoot(afs[1][4]*afs[3][4]);
	else
		a13a:=-SquareRoot(afs[1][4]*afs[3][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[1][5]*afs[3][5]))[1] gt 0 then
		a13b:=SquareRoot(afs[1][5]*afs[3][5]);
	else
		a13b:=-SquareRoot(afs[1][5]*afs[3][5]);
	end if;
	
	if RealEmbeddings(SquareRoot(afs[1][4]*afs[4][4]))[1] gt 0 then
		a14a:=SquareRoot(afs[1][4]*afs[4][4]);
	else
		a14a:=-SquareRoot(afs[1][4]*afs[4][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[1][5]*afs[4][5]))[1] gt 0 then
		a14b:=SquareRoot(afs[1][5]*afs[4][5]);
	else
		a14b:=-SquareRoot(afs[1][5]*afs[4][5]);
	end if;
	if RealEmbeddings(SquareRoot(afs[2][4]*afs[3][4]))[1] gt 0 then
		a23a:=SquareRoot(afs[2][4]*afs[3][4]);
	else
		a23a:=-SquareRoot(afs[2][4]*afs[3][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[2][5]*afs[3][5]))[1] gt 0 then
		a23b:=SquareRoot(afs[2][5]*afs[3][5]);
	else
		a23b:=-SquareRoot(afs[2][5]*afs[3][5]);
	end if;
	
	if RealEmbeddings(SquareRoot(afs[2][4]*afs[4][4]))[1] gt 0 then
		a24a:=SquareRoot(afs[2][4]*afs[4][4]);
	else
		a24a:=-SquareRoot(afs[2][4]*afs[4][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[2][5]*afs[4][5]))[1] gt 0 then
		a24b:=SquareRoot(afs[2][5]*afs[4][5]);
	else
		a24b:=-SquareRoot(afs[2][5]*afs[4][5]);
	end if;
	if RealEmbeddings(SquareRoot(afs[3][4]*afs[4][4]))[1] gt 0 then
		a34a:=SquareRoot(afs[3][4]*afs[4][4]);
	else
		a34a:=-SquareRoot(afs[3][4]*afs[4][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[3][5]*afs[4][5]))[1] gt 0 then
		a34b:=SquareRoot(afs[3][5]*afs[4][5]);
	else
		a34b:=-SquareRoot(afs[3][5]*afs[4][5]);
	end if;
	
	if RealEmbeddings(SquareRoot(afs[1][4]*afs[5][4]))[1] gt 0 then
		a15a:=SquareRoot(afs[1][4]*afs[5][4]);
	else
		a15a:=-SquareRoot(afs[1][4]*afs[5][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[1][5]*afs[5][5]))[1] gt 0 then
		a15b:=SquareRoot(afs[1][5]*afs[5][5]);
	else
		a15b:=-SquareRoot(afs[1][5]*afs[5][5]);
	end if;
	if RealEmbeddings(SquareRoot(afs[2][4]*afs[5][4]))[1] gt 0 then
		a25a:=SquareRoot(afs[2][4]*afs[5][4]);
	else
		a25a:=-SquareRoot(afs[2][4]*afs[5][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[2][5]*afs[5][5]))[1] gt 0 then
		a25b:=SquareRoot(afs[2][5]*afs[5][5]);
	else
		a25b:=-SquareRoot(afs[2][5]*afs[5][5]);
	end if;
	
	if RealEmbeddings(SquareRoot(afs[3][4]*afs[5][4]))[1] gt 0 then
		a35a:=SquareRoot(afs[3][4]*afs[5][4]);
	else
		a35a:=-SquareRoot(afs[3][4]*afs[5][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[3][5]*afs[5][5]))[1] gt 0 then
		a35b:=SquareRoot(afs[3][5]*afs[5][5]);
	else
		a35b:=-SquareRoot(afs[3][5]*afs[5][5]);
	end if;
	if RealEmbeddings(SquareRoot(afs[4][4]*afs[5][4]))[1] gt 0 then
		a45a:=SquareRoot(afs[4][4]*afs[5][4]);
	else
		a45a:=-SquareRoot(afs[4][4]*afs[5][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[4][5]*afs[5][5]))[1] gt 0 then
		a45b:=SquareRoot(afs[4][5]*afs[5][5]);
	else
		a45b:=-SquareRoot(afs[4][5]*afs[5][5]);
	end if;
	
	if RealEmbeddings(SquareRoot(afs[1][4]*afs[6][4]))[1] gt 0 then
		a16a:=SquareRoot(afs[1][4]*afs[6][4]);
	else
		a16a:=-SquareRoot(afs[1][4]*afs[6][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[1][5]*afs[6][5]))[1] gt 0 then
		a16b:=SquareRoot(afs[1][5]*afs[6][5]);
	else
		a16b:=-SquareRoot(afs[1][5]*afs[6][5]);
	end if;
	if RealEmbeddings(SquareRoot(afs[2][4]*afs[6][4]))[1] gt 0 then
		a26a:=SquareRoot(afs[2][4]*afs[6][4]);
	else
		a26a:=-SquareRoot(afs[2][4]*afs[6][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[2][5]*afs[6][5]))[1] gt 0 then
		a26b:=SquareRoot(afs[2][5]*afs[6][5]);
	else
		a26b:=-SquareRoot(afs[2][5]*afs[6][5]);
	end if;
	
	if RealEmbeddings(SquareRoot(afs[3][4]*afs[6][4]))[1] gt 0 then
		a36a:=SquareRoot(afs[3][4]*afs[6][4]);
	else
		a36a:=-SquareRoot(afs[3][4]*afs[6][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[3][5]*afs[6][5]))[1] gt 0 then
		a36b:=SquareRoot(afs[3][5]*afs[6][5]);
	else
		a36b:=-SquareRoot(afs[3][5]*afs[6][5]);
	end if;
	
	if RealEmbeddings(SquareRoot(afs[4][4]*afs[6][4]))[1] gt 0 then
		a46a:=SquareRoot(afs[4][4]*afs[6][4]);
	else
		a46a:=-SquareRoot(afs[4][4]*afs[6][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[4][5]*afs[6][5]))[1] gt 0 then
		a46b:=SquareRoot(afs[4][5]*afs[6][5]);
	else
		a46b:=-SquareRoot(afs[4][5]*afs[6][5]);
	end if;
	if RealEmbeddings(SquareRoot(afs[5][4]*afs[6][4]))[1] gt 0 then
		a56a:=SquareRoot(afs[5][4]*afs[6][4]);
	else
		a56a:=-SquareRoot(afs[5][4]*afs[6][4]);
	end if;
	if RealEmbeddings(SquareRoot(afs[5][5]*afs[6][5]))[1] gt 0 then
		a56b:=SquareRoot(afs[5][5]*afs[6][5]);
	else
		a56b:=-SquareRoot(afs[5][5]*afs[6][5]);
	end if;
	
	
	q:=(zz+5)*(zz-9)*(zz-13);
	
	K<b1>:=NumberField([Polynomial([-x,0,1]):x in [afs[1][4]*afs[1][5]]]:Abs);
	// b1:=SquareRoot(afs[1][4]*afs[1][5]);
	b2:=SquareRoot(K!(afs[2][4]*afs[2][5]));
	b3:=SquareRoot(K!(afs[3][4]*afs[3][5]));
	b4:=SquareRoot(K!(afs[4][4]*afs[4][5]));
	b5:=SquareRoot(K!(afs[5][4]*afs[5][5]));
	b6:=SquareRoot(K!(afs[6][4]*afs[6][5]));
	bs:=[b1,-b2,-b3,-b4,-b5,-b6];
	es:=[1,1,-1,-1,1,-1];
	for sl in sls do
		if &+[K!sl[i]*es[i]*bs[i] : i in [1..6]] eq 0 then
			print sl;
			matarru:=[[afs[1][4], -a12a, a13a, a14a, -a15a, a16a],
					 [-a12a, afs[2][4], -a23a, -a24a, a25a, a26a],
					 [a13a, -a23a, afs[3][4], a34a, -a35a, a36a],
					 [a14a, -a24a, a34a, afs[4][4], -a45a, a46a],
					 [-a15a, a25a, -a35a, -a45a, afs[5][4], a56a],
					 [a16a, a26a, a36a, a46a, a56a, afs[6][4]]
					 ];
					 uu:=Matrix(N,matarru);
 			matarrv:=[[afs[1][5], -a12b, -a13b, -a14b, -a15b, -a16b],
 					 [-a12b, afs[2][5], a23b, a24b, a25b, -a26b],
 					 [-a13b, a23b, afs[3][5], a34b, a35b, a36b],
 					 [-a14b, a24b, a34b, afs[4][5], a45b, a46b],
 					 [-a15b, a25b, a35b, a45b, afs[5][5], -a56b],
 					 [-a16b, -a26b, a36b, a46b, -a56b, afs[6][5]]
 					 ];
 					 vv:=Matrix(N,matarrv);
			 print 3*(67+19*sqrt33)*uu/2+3*(67-19*sqrt33)*vv/2;
			
		end if;
	end for;
	
	fff6:=comptPolys[6]*qp;
	print Factorisation(fff6);
	mp6:=P!(fff6/GCD(fff6,Derivative(fff6)));
	qp6:=P!(fff6/mp6);
	ggroots6:=Roots(fff6,AC);

	mults6:=Vector(AC,[ggroots6[i][2] : i in [1..#ggroots6]]);
	froots6:=[ggroots6[i][1] : i in [1..#ggroots6]];

	print froots6;
	fbas6:=[PK!(PK!(mp6)/(z-r)) : r in froots6];
	print fbas6;
	fbaslist6:=[Reverse(Coefficients(l)) : l in fbas6];

	fbasm6:=Matrix(AC,Degree(mp6),Degree(mp6),[fbaslist6[j] : j in [1..Degree(mp6)]]);

	bb6:=mults6*fbasm6;
	tic := Cputime();
	llSeidelred6:=getInterlacingCharacteristicPolynomials2(mp6,qp6,47,7);
	toc := Cputime(tic);
	print "Time taken to compute interlacing char polys:", toc,  "seconds";
	print "";
	numrows6:=#llSeidelred6;
	m6:=Matrix(Rationals(),numrows6,Degree(mp6),[llSeidelred6[j] : j in [1..numrows6]]);
	print "number of interlacing polynomials:", numrows6;
	
	comptPolys2:=[P!(comptPolys[i]*qp/GCD(comptPolys[i]*qp,Derivative(comptPolys[i]*qp))) : i in [1..6]];
	llSeidelred6int:=[];
	for p in llSeidelred6 do
		if interlace(comptPolys2[1],(x-9)*P!Polynomial(Reverse(p))) or interlace(comptPolys2[3],(x-9)*P!Polynomial(Reverse(p))) or interlace(comptPolys2[4],(x-9)*P!Polynomial(Reverse(p))) then
			llSeidelred6int cat:=[p];
		end if;
	end for;
	numrows6int:=#llSeidelred6int;
	m6int:=Matrix(Rationals(),numrows6int,Degree(mp6),[llSeidelred6int[j] : j in [1..numrows6int]]);
	
	print "number of interlacing polynomials that interlace f1, f3, or f4:", numrows6int;
	print m6int;

	
	fWarranted1:=[ 1, -42, 662, -4776, 15201, -16566 ];
	fWarrantedInd1:=Index(llSeidelred6int,fWarranted1);
	llSeidelred1:=Remove(llSeidelred6int,fWarrantedInd1);
	fWarrantedRange1:=Remove([1..numrows6int],fWarrantedInd1);
	
	fWarranted2:=[ 1, -42, 662, -4772, 15113, -16082 ];
	fWarrantedInd2:=Index(llSeidelred1,fWarranted2);
	print #llSeidelred6int, Index(llSeidelred6int,fWarranted2);
	
	fWarrantedRange:=Remove(fWarrantedRange1,fWarrantedInd2);
	print fWarrantedRange;
	mfWarranted:=Submatrix(m6int,fWarrantedRange,[1..Degree(mp6)]);
	print ""; 
	print "Show that f1= ", fWarranted1, " and f2 = ", fWarranted2, " are a warranted pair"; 
	print "Matrix A' corresponding to interlacing polynomials without f1 and f2:"; 
	print mfWarranted;
	print ""; 
	// #Farkas certificate
	fc:=Vector(Rationals(),[5716582502, 0, 0, 1614215, 145454, 13175]);
	print "Certificate of warranty c:";
	print "c = ", fc;
	ac:= fc*Transpose(mfWarranted);
	print "Ac >= 0: ", isAtLeastZero(ac);
	print "Ac = ", ac;
	innerprod6:= &+[fc[j]*bb6[j] : j in [1..Degree(mp6)]];

	print "<g,c> < 0: ", Norm(innerprod6) lt 0;

	print "<g,c> = ", innerprod6;
	
	print "--- get polys compatible with f_{6,2} ---";
	compatPolys62:=getCompatiblePolynomials(llSeidelred6int,fWarranted1,fff6,mp6);

	print compatPolys62;
	numrows62:=#compatPolys62;
	m:=Matrix(AC,numrows62,Degree(mp6),[compatPolys62[j] : j in [1..numrows62]]);
	print "Certificate of infeasibility c:";
	// #Farkas certificate
	fc:=Vector(Rationals(),[38051376, 0, 0, 10571, 823, 3]);
	print "c = ", fc;
	ac:= fc*Transpose(m);
	print "Ac >= 0: ", isAtLeastZero(ac);
	print "Ac = ", ac;
	innerprod62:= &+[fc[j]*bb6[j] : j in [1..Degree(mp6)]];

	print "<g,c> < 0: ", Norm(innerprod62) lt 0;

	print "<g,c> = ", innerprod62;
	print "";
	
	print "--- get polys compatible with f_{6,3} ---";
	compatPolys63:=getCompatiblePolynomials(llSeidelred6int,fWarranted2,fff6,mp6);

	print compatPolys63;
	numrows63:=#compatPolys63;
	m:=Matrix(AC,numrows63,Degree(mp6),[compatPolys63[j] : j in [1..numrows63]]);
	print "Certificate of infeasibility c:";
	// #Farkas certificate
	fc:=Vector(Rationals(),[-7998906611, 0, 0, -2236872, -195255, -17128]);
	print "c = ", fc;
	ac:= fc*Transpose(m);
	print "Ac >= 0: ", isAtLeastZero(ac);
	print "Ac = ", ac;
	innerprod63:= &+[fc[j]*bb6[j] : j in [1..Degree(mp6)]];

	print "<g,c> < 0: ", Norm(innerprod63) lt 0;

	print "<g,c> = ", innerprod63;
	print "";
end procedure;
